{"version":3,"file":"ExtensionHost.js","sourceRoot":"","sources":["../../src/ExtensionHost.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs-extra\";\r\n\r\nimport {\r\n    window, DiagnosticSeverity, ExtensionContext, workspace, languages, commands, debug, Diagnostic, TextDocument,\r\n    TextDocumentChangeEvent, TextEditor, TextEditorEdit, TextEditorRevealType, TextEditorSelectionChangeEvent,\r\n    Selection, Range, ViewColumn,\r\n} from \"vscode\";\r\n\r\nimport {\r\n    AntlrFacade,\r\n} from \"./backend/facade\";\r\nimport { DiagnosticType, IGenerationOptions, ILexicalRange, ISentenceGenerationOptions } from \"./backend/types\";\r\nimport { FrontendUtils } from \"./frontend/FrontendUtils\";\r\nimport { ProgressIndicator } from \"./frontend/ProgressIndicator\";\r\nimport { AntlrDebugConfigurationProvider } from \"./AntlrDebugConfigurationProvider\";\r\nimport { ActionsProvider } from \"./frontend/ActionsProvider\";\r\n\r\nimport { ATNGraphProvider } from \"./frontend/webviews/ATNGraphProvider\";\r\nimport { CallGraphProvider } from \"./frontend/webviews/CallGraphProvider\";\r\nimport { RailroadDiagramProvider } from \"./frontend/webviews/RailroadDiagramProvider\";\r\nimport { ParseTreeProvider } from \"./frontend/webviews/ParseTreeProvider\";\r\n\r\nimport { ChannelsProvider } from \"./frontend/ChannelsProvider\";\r\nimport { AntlrCodeLensProvider } from \"./frontend/CodeLensProvider\";\r\nimport { AntlrCompletionItemProvider } from \"./frontend/CompletionItemProvider\";\r\nimport { AntlrDefinitionProvider } from \"./frontend/DefinitionProvider\";\r\nimport { AntlrFormattingProvider } from \"./frontend/FormattingProvider\";\r\nimport { AntlrHoverProvider } from \"./frontend/HoverProvider\";\r\nimport { ImportsProvider } from \"./frontend/ImportsProvider\";\r\nimport { LexerSymbolsProvider } from \"./frontend/LexerSymbolsProvider\";\r\nimport { ModesProvider } from \"./frontend/ModesProvider\";\r\nimport { ParserSymbolsProvider } from \"./frontend/ParserSymbolsProvider\";\r\nimport { AntlrReferenceProvider } from \"./frontend/ReferenceProvider\";\r\nimport { AntlrRenameProvider } from \"./frontend/RenameProvider\";\r\nimport { AntlrSymbolProvider } from \"./frontend/SymbolProvider\";\r\n\r\nconst errorOutputChannel = window.createOutputChannel(\"ANTLR4 Errors\");\r\n\r\nexport const printErrors = (lines: unknown[], revealOutput: boolean): void => {\r\n    lines.forEach((line) => {\r\n        if (typeof line === \"string\") {\r\n            errorOutputChannel.appendLine(line);\r\n        } else if (line instanceof Error) {\r\n            errorOutputChannel.appendLine(line.stack ?? line.message);\r\n        } else {\r\n            errorOutputChannel.appendLine(String(line));\r\n        }\r\n    });\r\n\r\n    if (revealOutput) {\r\n        errorOutputChannel.show(true);\r\n    }\r\n};\r\n\r\n// This is the main extension class.\r\nexport class ExtensionHost {\r\n    private static readonly diagnosticMap = new Map<DiagnosticType, DiagnosticSeverity>([\r\n        [DiagnosticType.Hint, DiagnosticSeverity.Hint],\r\n        [DiagnosticType.Info, DiagnosticSeverity.Information],\r\n        [DiagnosticType.Warning, DiagnosticSeverity.Warning],\r\n        [DiagnosticType.Error, DiagnosticSeverity.Error],\r\n    ]);\r\n\r\n    private static readonly antlrSelector = { language: \"antlr\", scheme: \"file\" };\r\n    private static readonly diagnosticTypeMap = new Map<DiagnosticType, DiagnosticSeverity>();\r\n\r\n    private readonly importDir: string | undefined;\r\n    private readonly backend: AntlrFacade;\r\n    private readonly progress = new ProgressIndicator();\r\n\r\n    private readonly diagnosticCollection = languages.createDiagnosticCollection(\"antlr\");\r\n\r\n    private importsProvider: ImportsProvider;\r\n    private lexerSymbolsProvider: LexerSymbolsProvider;\r\n    private parserSymbolsProvider: ParserSymbolsProvider;\r\n    private channelsProvider: ChannelsProvider;\r\n    private modesProvider: ModesProvider;\r\n    private actionsProvider: ActionsProvider;\r\n\r\n    private parseTreeProvider: ParseTreeProvider;\r\n    private codeLensProvider: AntlrCodeLensProvider;\r\n    private diagramProvider: RailroadDiagramProvider;\r\n    private atnGraphProvider: ATNGraphProvider;\r\n    private callGraphProvider: CallGraphProvider;\r\n\r\n    private changeTimers = new Map<string, ReturnType<typeof setTimeout>>(); // Keyed by file name.\r\n\r\n    public constructor(context: ExtensionContext) {\r\n        this.importDir = workspace.getConfiguration(\"antlr4.generation\").importDir as string;\r\n        this.backend = new AntlrFacade(this.importDir ?? \"\", context.extensionPath);\r\n\r\n        this.importsProvider = new ImportsProvider(this.backend);\r\n        context.subscriptions.push(window.registerTreeDataProvider(\"antlr4.imports\", this.importsProvider));\r\n\r\n        this.lexerSymbolsProvider = new LexerSymbolsProvider(this.backend);\r\n        context.subscriptions.push(window.registerTreeDataProvider(\"antlr4.lexerSymbols\", this.lexerSymbolsProvider));\r\n\r\n        this.parserSymbolsProvider = new ParserSymbolsProvider(this.backend);\r\n        context.subscriptions.push(window.registerTreeDataProvider(\"antlr4.parserSymbols\", this.parserSymbolsProvider));\r\n\r\n        this.channelsProvider = new ChannelsProvider(this.backend);\r\n        context.subscriptions.push(window.registerTreeDataProvider(\"antlr4.channels\", this.channelsProvider));\r\n\r\n        this.modesProvider = new ModesProvider(this.backend);\r\n        context.subscriptions.push(window.registerTreeDataProvider(\"antlr4.modes\", this.modesProvider));\r\n\r\n        this.actionsProvider = new ActionsProvider(this.backend);\r\n        this.actionsProvider.actionTree = window.createTreeView(\"antlr4.actions\",\r\n            { treeDataProvider: this.actionsProvider });\r\n\r\n        this.parseTreeProvider = new ParseTreeProvider(this.backend, context);\r\n\r\n        this.diagramProvider = new RailroadDiagramProvider(this.backend, context);\r\n        this.atnGraphProvider = new ATNGraphProvider(this.backend, context);\r\n        this.callGraphProvider = new CallGraphProvider(this.backend, context);\r\n\r\n        // Initialize certain providers.\r\n        const editor = window.activeTextEditor;\r\n        if (editor && FrontendUtils.isGrammarFile(editor.document)) {\r\n            FrontendUtils.updateVsCodeContext(this.backend, editor.document);\r\n            this.updateTreeProviders(editor.document);\r\n        }\r\n\r\n        this.registerEventHandlers();\r\n        this.addSubscriptions(context);\r\n\r\n        // Load interpreter + cache data for each open document, if there's any.\r\n        const doNotGenerate = workspace.getConfiguration(\"antlr4.generation\").mode === \"none\";\r\n\r\n        for (const document of workspace.textDocuments) {\r\n            if (FrontendUtils.isGrammarFile(document)) {\r\n                const antlrPath = path.join(path.dirname(document.fileName), \".antlr\");\r\n                try {\r\n                    void this.backend.generate(document.fileName,\r\n                        { outputDir: antlrPath, loadOnly: true, generateIfNeeded: !doNotGenerate });\r\n                    ATNGraphProvider.addStatesForGrammar(antlrPath, document.fileName);\r\n                } catch (error) {\r\n                    printErrors([error], true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public shutDown(): void {\r\n        //ATNGraphProvider.saveStates();\r\n    }\r\n\r\n    private addSubscriptions(context: ExtensionContext): void {\r\n        context.subscriptions.push(languages.registerHoverProvider(ExtensionHost.antlrSelector,\r\n            new AntlrHoverProvider(this.backend)));\r\n        context.subscriptions.push(languages.registerDefinitionProvider(ExtensionHost.antlrSelector,\r\n            new AntlrDefinitionProvider(this.backend)));\r\n        context.subscriptions.push(languages.registerDocumentSymbolProvider(ExtensionHost.antlrSelector,\r\n            new AntlrSymbolProvider(this.backend)));\r\n        this.codeLensProvider = new AntlrCodeLensProvider(this.backend);\r\n        context.subscriptions.push(languages.registerCodeLensProvider(ExtensionHost.antlrSelector,\r\n            this.codeLensProvider));\r\n        context.subscriptions.push(languages.registerCompletionItemProvider(ExtensionHost.antlrSelector,\r\n            new AntlrCompletionItemProvider(this.backend), \" \", \":\", \"@\", \"<\", \"{\", \"[\"));\r\n        context.subscriptions.push(languages.registerDocumentRangeFormattingEditProvider(ExtensionHost.antlrSelector,\r\n            new AntlrFormattingProvider(this.backend)));\r\n        context.subscriptions.push(languages.registerRenameProvider(ExtensionHost.antlrSelector,\r\n            new AntlrRenameProvider(this.backend)));\r\n        context.subscriptions.push(languages.registerReferenceProvider(ExtensionHost.antlrSelector,\r\n            new AntlrReferenceProvider(this.backend)));\r\n\r\n        // The single RRD diagram command.\r\n        context.subscriptions.push(commands.registerTextEditorCommand(\"antlr.rrd.singleRule\",\r\n            (textEditor: TextEditor, _edit: TextEditorEdit) => {\r\n                this.diagramProvider.showWebview(textEditor.document.uri, {\r\n                    title: \"RRD: \" + path.basename(textEditor.document.fileName),\r\n                    fullList: false,\r\n                });\r\n            }),\r\n        );\r\n\r\n        // The full RRD diagram command.\r\n        context.subscriptions.push(commands.registerTextEditorCommand(\"antlr.rrd.allRules\",\r\n            (textEditor: TextEditor, _edit: TextEditorEdit) => {\r\n                this.diagramProvider.showWebview(textEditor.document.uri, {\r\n                    title: \"RRD: \" + path.basename(textEditor.document.fileName),\r\n                    fullList: true,\r\n                });\r\n            }),\r\n        );\r\n\r\n        // The ATN graph command.\r\n        context.subscriptions.push(commands.registerTextEditorCommand(\"antlr.atn.singleRule\",\r\n            (textEditor: TextEditor, _edit: TextEditorEdit) => {\r\n                this.atnGraphProvider.showWebview(textEditor.document.uri, {\r\n                    title: \"ATN: \" + path.basename(textEditor.document.fileName),\r\n                });\r\n            }),\r\n        );\r\n\r\n        // The call graph command.\r\n        context.subscriptions.push(commands.registerTextEditorCommand(\"antlr.call-graph\",\r\n            (textEditor: TextEditor, _edit: TextEditorEdit) => {\r\n                this.callGraphProvider.showWebview(textEditor.document.uri, {\r\n                    title: \"Call Graph: \" + path.basename(textEditor.document.fileName),\r\n                });\r\n            }),\r\n        );\r\n\r\n        // Sentence generation.\r\n        const sentenceOutputChannel = window.createOutputChannel(\"ANTLR4 Sentence Generation\");\r\n        context.subscriptions.push(commands.registerTextEditorCommand(\"antlr.tools.generateSentences\",\r\n            (textEditor: TextEditor, _edit: TextEditorEdit) => {\r\n                const grammarFileName = textEditor.document.uri.fsPath;\r\n                const configFileName = grammarFileName.replace(path.extname(grammarFileName), \".json\");\r\n\r\n                // Try to load generation configuration from a side json file.\r\n                let config: ISentenceGenerationOptions = {};\r\n                if (fs.existsSync(configFileName)) {\r\n                    const content = fs.readFileSync(configFileName, \"utf-8\");\r\n                    try {\r\n                        config = JSON.parse(content) as ISentenceGenerationOptions;\r\n                    } catch (reason) {\r\n                        printErrors([\"Cannot parse sentence generation config file:\", reason], true);\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (typeof config.actionFile === \"string\" && config.actionFile.length > 0) {\r\n                    if (!path.isAbsolute(config.actionFile)) {\r\n                        config.actionFile = path.join(path.dirname(grammarFileName), config.actionFile);\r\n                    }\r\n                }\r\n\r\n                const caret = textEditor.selection.active;\r\n                const [ruleName] = this.backend.ruleFromPosition(grammarFileName, caret.character, caret.line + 1);\r\n\r\n                if (!ruleName) {\r\n                    printErrors([\"ANTLR4 sentence generation: no rule selected\"], true);\r\n\r\n                    return;\r\n                }\r\n\r\n                if (config.clear) {\r\n                    sentenceOutputChannel.clear();\r\n                }\r\n\r\n                this.backend.generateSentence(grammarFileName, ruleName, config, (sentence: string, index: number) => {\r\n                    sentenceOutputChannel.appendLine(`${index}) ${sentence}`);\r\n                    sentenceOutputChannel.show(true);\r\n                });\r\n            }),\r\n        );\r\n\r\n        // Debugging support.\r\n        context.subscriptions.push(debug.registerDebugConfigurationProvider(\"antlr-debug\",\r\n            new AntlrDebugConfigurationProvider(this.backend, this.parseTreeProvider)));\r\n\r\n        // Helper commands.\r\n        context.subscriptions.push(commands.registerCommand(\"antlr.openGrammar\", (grammar: string) => {\r\n            void workspace.openTextDocument(grammar).then((document) => {\r\n                return window.showTextDocument(document, ViewColumn.Active, false);\r\n            });\r\n        }));\r\n\r\n        context.subscriptions.push(commands.registerCommand(\"antlr.selectGrammarRange\", (range: ILexicalRange) => {\r\n            if (window.activeTextEditor) {\r\n                window.activeTextEditor.selection = new Selection(\r\n                    range.start.row - 1, range.start.column,\r\n                    range.end.row - 1, range.end.column + 1,\r\n                );\r\n                window.activeTextEditor.revealRange(\r\n                    new Range(range.start.row - 1, range.start.column, range.end.row - 1, range.end.column + 1),\r\n                    TextEditorRevealType.InCenterIfOutsideViewport,\r\n                );\r\n            }\r\n        }));\r\n    }\r\n\r\n    private registerEventHandlers(): void {\r\n        workspace.onDidOpenTextDocument((document: TextDocument) => {\r\n            if (FrontendUtils.isGrammarFile(document)) {\r\n                this.backend.loadGrammar(document.fileName);\r\n                this.regenerateBackgroundData(document);\r\n            }\r\n        });\r\n\r\n        workspace.onDidCloseTextDocument((document: TextDocument) => {\r\n            if (FrontendUtils.isGrammarFile(document)) {\r\n                this.backend.releaseGrammar(document.fileName);\r\n                this.diagnosticCollection.set(document.uri, []);\r\n            }\r\n        });\r\n\r\n        workspace.onDidChangeTextDocument((event: TextDocumentChangeEvent) => {\r\n            if (event.contentChanges.length > 0 && FrontendUtils.isGrammarFile(event.document)) {\r\n\r\n                const fileName = event.document.fileName;\r\n                this.backend.setText(fileName, event.document.getText());\r\n\r\n                const timer = this.changeTimers.get(fileName);\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                }\r\n\r\n                this.changeTimers.set(fileName, setTimeout(() => {\r\n                    this.changeTimers.delete(fileName);\r\n                    this.backend.reparse(fileName);\r\n\r\n                    this.diagramProvider.update(window.activeTextEditor!);\r\n                    this.callGraphProvider.update(window.activeTextEditor!);\r\n                    this.processDiagnostic(event.document);\r\n                    this.codeLensProvider.refresh();\r\n                }, 300));\r\n            }\r\n        });\r\n\r\n        workspace.onDidSaveTextDocument((document: TextDocument) => {\r\n            if (FrontendUtils.isGrammarFile(document)) {\r\n                this.regenerateBackgroundData(document);\r\n            }\r\n        });\r\n\r\n        window.onDidChangeTextEditorSelection((event: TextEditorSelectionChangeEvent) => {\r\n            if (FrontendUtils.isGrammarFile(event.textEditor.document)) {\r\n                this.diagramProvider.update(event.textEditor);\r\n                this.atnGraphProvider.update(event.textEditor, false);\r\n                this.actionsProvider.update(event.textEditor);\r\n            }\r\n        });\r\n\r\n        window.onDidChangeActiveTextEditor((textEditor: TextEditor | undefined) => {\r\n            if (textEditor) {\r\n                FrontendUtils.updateVsCodeContext(this.backend, textEditor.document);\r\n                this.updateTreeProviders(textEditor.document);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert diagnostic information for the given file to show in vscode.\r\n     *\r\n     * @param document The document for which this should happen.\r\n     */\r\n    private processDiagnostic = (document: TextDocument) => {\r\n        const diagnostics = [];\r\n        const entries = this.backend.getDiagnostics(document.fileName);\r\n        for (const entry of entries) {\r\n            const startRow = entry.range.start.row === 0 ? 0 : entry.range.start.row - 1;\r\n            const endRow = entry.range.end.row === 0 ? 0 : entry.range.end.row - 1;\r\n            const range = new Range(startRow, entry.range.start.column, endRow, entry.range.end.column);\r\n            const diagnostic = new Diagnostic(range, entry.message, ExtensionHost.diagnosticTypeMap.get(entry.type));\r\n            diagnostics.push(diagnostic);\r\n        }\r\n        this.diagnosticCollection.set(document.uri, diagnostics);\r\n    };\r\n\r\n    /**\r\n     * For certain services we have to (re)generate files from grammars in the background:\r\n     * - syntactic + semantic grammar analysis by the ANTLR tool\r\n     * - generate interpreter data (for debugging + ATN views)\r\n     *\r\n     * @param document For which to generate the data.\r\n     */\r\n    private regenerateBackgroundData(document: TextDocument): void {\r\n        if (workspace.getConfiguration(\"antlr4.generation\").mode === \"none\") {\r\n            return;\r\n        }\r\n\r\n        const externalMode = workspace.getConfiguration(\"antlr4.generation\").mode === \"external\";\r\n\r\n        this.progress.startAnimation();\r\n        const basePath = path.dirname(document.fileName);\r\n        const antlrPath = path.join(basePath, \".antlr\");\r\n\r\n        // In internal mode we generate files with the default target language into our .antlr folder.\r\n        // In external mode the files are generated into the given output folder (or the folder where the\r\n        // main grammar is). In this case we have to move the interpreter data to our .antlr folder.\r\n        let outputDir = antlrPath;\r\n        if (externalMode) {\r\n            outputDir = workspace.getConfiguration(\"antlr4.generation\").outputDir as string;\r\n            if (!outputDir) {\r\n                outputDir = basePath;\r\n            } else {\r\n                if (!path.isAbsolute(outputDir)) {\r\n                    outputDir = path.join(basePath, outputDir);\r\n                }\r\n            }\r\n        }\r\n\r\n        try {\r\n            fs.ensureDirSync(outputDir);\r\n        } catch (error) {\r\n            this.progress.stopAnimation();\r\n            void window.showErrorMessage(\"Cannot create output folder: \" + (error as string));\r\n\r\n            return;\r\n        }\r\n\r\n        const options: IGenerationOptions = {\r\n            baseDir: basePath,\r\n            libDir: workspace.getConfiguration(\"antlr4.generation\").importDir as string,\r\n            outputDir,\r\n            listeners: false,\r\n            visitors: false,\r\n            alternativeJar: workspace.getConfiguration(\"antlr4.generation\").alternativeJar as string,\r\n            additionalParameters: workspace.getConfiguration(\"antlr4.generation\").additionalParameters as string,\r\n        };\r\n\r\n        if (externalMode) {\r\n            options.language = workspace.getConfiguration(\"antlr4.generation\").language as string;\r\n            options.package = workspace.getConfiguration(\"antlr4.generation\").package as string;\r\n            options.listeners = workspace.getConfiguration(\"antlr4.generation\").listeners as boolean;\r\n            options.visitors = workspace.getConfiguration(\"antlr4.generation\").visitors as boolean;\r\n        }\r\n\r\n        const result = this.backend.generate(document.fileName, options);\r\n        result.then((affectedFiles: string[]) => {\r\n            for (const file of affectedFiles) {\r\n                const fullPath = path.resolve(basePath, file);\r\n                workspace.textDocuments.forEach((textDocument) => {\r\n                    if (textDocument.fileName === fullPath) {\r\n                        this.processDiagnostic(textDocument);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Finally move interpreter files to our internal folder and reload that.\r\n            if (externalMode && antlrPath !== outputDir) {\r\n                try {\r\n                    const files = fs.readdirSync(outputDir);\r\n                    for (const file of files) {\r\n                        if (file.endsWith(\".interp\")) {\r\n                            const sourceFile = path.join(outputDir, file);\r\n                            fs.moveSync(sourceFile, path.join(antlrPath, file), { overwrite: true });\r\n                        }\r\n                    }\r\n                } catch (reason) {\r\n                    this.progress.stopAnimation();\r\n                    printErrors([reason], true);\r\n                }\r\n            }\r\n\r\n            this.backend.generate(document.fileName, { outputDir: antlrPath, loadOnly: true }).then(() => {\r\n                if (window.activeTextEditor?.document.fileName === document.fileName) {\r\n                    this.atnGraphProvider.update(window.activeTextEditor, true);\r\n                }\r\n                this.updateTreeProviders(document);\r\n\r\n                this.progress.stopAnimation();\r\n            }).catch((reason) => {\r\n                this.progress.stopAnimation();\r\n                printErrors([reason], true);\r\n            });\r\n\r\n        }).catch((reason) => {\r\n            this.progress.stopAnimation();\r\n            printErrors([reason], true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates all used tree providers for the given document.\r\n     *\r\n     * @param document The source for the updates.\r\n     */\r\n    private updateTreeProviders(document: TextDocument | undefined): void {\r\n        this.lexerSymbolsProvider.refresh(document);\r\n        this.parserSymbolsProvider.refresh(document);\r\n        this.importsProvider.refresh(document);\r\n        this.channelsProvider.refresh(document);\r\n        this.modesProvider.refresh(document);\r\n        this.actionsProvider.refresh(document);\r\n    }\r\n}\r\n"]}