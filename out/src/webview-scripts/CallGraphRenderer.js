export class CallGraphRenderer {
    data;
    initialDiameter = 1000;
    diameter = this.initialDiameter;
    initialScale = 0.75;
    svg;
    topGroup;
    cluster;
    nodeSelection;
    linkSelection;
    constructor(data) {
        this.data = data;
        const radius = this.diameter / 2;
        this.svg = d3.select("svg")
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .attr("version", "1.1")
            .attr("viewBox", `0 0 ${this.diameter} ${this.diameter}`);
        this.topGroup = this.svg.append("g");
        const zoom = d3.zoom()
            .scaleExtent([0.1 * this.initialScale, 10 * this.initialScale])
            .on("zoom", (event) => {
            this.topGroup.attr("transform", event.transform.toString());
        });
        this.svg
            .call(zoom)
            .call(zoom.transform, d3.zoomIdentity
            .translate(radius, radius)
            .scale(this.initialScale))
            .on("dblclick.zoom", null);
        this.cluster = d3.cluster().size([360, radius * 0.9]);
    }
    render() {
        const radius = this.diameter / 2;
        this.cluster.size([360, radius * 0.9]);
        const line = d3.lineRadial()
            .radius((node) => {
            return node.y;
        })
            .angle((node) => {
            return node.x / 180 * Math.PI;
        })
            .curve(d3.curveBundle.beta(0.75));
        this.linkSelection = this.topGroup.append("g").selectAll(".link");
        this.nodeSelection = this.topGroup.append("g").selectAll(".node");
        const root = d3.hierarchy(this.packageHierarchy(this.data), (d) => {
            return d.children;
        });
        const nodes = root.descendants();
        const linkPairs = this.packageReferences(nodes);
        this.cluster(root);
        this.linkSelection = this.linkSelection
            .data(linkPairs)
            .enter().append("path")
            .attr("class", "link")
            .attr("d", (link) => {
            return line(link.source.path(link.target));
        });
        this.nodeSelection = this.nodeSelection
            .data(nodes.filter((n) => {
            return !n.children;
        }))
            .enter().append("text")
            .attr("class", (d) => {
            return "node " + d.data.class;
        })
            .attr("dy", "0.31em")
            .attr("transform", (d) => {
            return `rotate(${(d.x - 90)})translate(${(d.y + 10)},0)` +
                (d.x < 180 ? "" : "rotate(180)");
        })
            .style("text-anchor", (d) => {
            return d.x < 180 ? "start" : "end";
        })
            .text((d) => {
            return d.data.key;
        })
            .on("mouseover", this.onMouseOver)
            .on("mouseout", this.onMouseOut);
    }
    changeDiameter(factor) {
        this.topGroup.selectChildren().remove();
        this.diameter *= factor;
        this.diameter = this.diameter < 100 ? 100 : (this.diameter > 10000 ? 10000 : this.diameter);
        this.render();
    }
    onMouseOver = (_event, node) => {
        this.nodeSelection.each((n) => {
            n.data.isSource = false;
            n.data.isTarget = false;
        });
        this.linkSelection
            .classed("link-target", (link) => {
            if (link.target === node) {
                return link.source.data.isSource = true;
            }
            else {
                return false;
            }
        })
            .classed("link-source", (link) => {
            if (link.source === node) {
                return link.target.data.isTarget = true;
            }
            else {
                return false;
            }
        })
            .classed("link-dimmed", (link) => {
            return (link.source !== node) && (link.target !== node);
        });
        this.nodeSelection
            .classed("node-target", (n) => {
            return n.data.isTarget;
        })
            .classed("node-source", (n) => {
            return n.data.isSource;
        });
    };
    onMouseOut = (_event, _node) => {
        this.linkSelection.classed("link-dimmed", false);
        this.linkSelection
            .classed("link-target", false)
            .classed("link-source", false);
        this.nodeSelection
            .classed("node-target", false)
            .classed("node-source", false);
    };
    packageHierarchy(entries) {
        const map = {};
        const modules = [];
        const find = (name, rule) => {
            let node = map[name];
            if (!node) {
                node = rule || {
                    name,
                    children: [],
                };
                map[name] = node;
                if (name.length > 0) {
                    const i = name.lastIndexOf(".");
                    node.parent = find(name.substring(0, i));
                    node.parent.children.push(node);
                    let index = modules.indexOf(node.parent.name);
                    if (index < 0) {
                        modules.push(node.parent.name);
                        index = modules.length - 1;
                    }
                    node.class = `module-${index % 10}`;
                    node.key = name.substring(i + 1);
                }
            }
            return node;
        };
        entries.forEach((rule) => {
            find(rule.name, rule);
        });
        return map[""];
    }
    packageReferences(nodes) {
        const map = {};
        const references = [];
        nodes.forEach((node) => {
            map[node.data.name] = node;
        });
        nodes.forEach((node) => {
            if (node.data.references) {
                node.data.references.forEach((name) => {
                    references.push({
                        source: map[node.data.name],
                        target: map[name],
                    });
                });
            }
        });
        return references;
    }
}
//# sourceMappingURL=data:application/json;base64,