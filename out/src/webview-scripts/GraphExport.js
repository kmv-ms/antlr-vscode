export const vscode = acquireVsCodeApi();
export class GraphExport {
    exportToSVG(type, name) {
        const svg = document.querySelectorAll("svg")[0];
        const args = {
            command: "saveSVG",
            name,
            type,
            svg: svg.outerHTML,
        };
        vscode.postMessage(args);
    }
    exportToHTML(type, name) {
        try {
            const workDocument = document.cloneNode(true);
            workDocument.querySelectorAll("script").forEach((e) => {
                e.parentNode?.removeChild(e);
            });
            workDocument.querySelectorAll(".header").forEach((e) => {
                e.parentNode?.removeChild(e);
            });
            workDocument.querySelectorAll("link").forEach((e) => {
                e.href = e.href.replace(/^.*[\\/]/, "");
            });
            const html = workDocument.querySelectorAll("html")[0];
            const args = { command: "saveHTML", name, type, html: html.outerHTML };
            vscode.postMessage(args);
        }
        catch (error) {
            vscode.postMessage({ command: "alert", text: "JS Error: " + String(error) });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JhcGhFeHBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd2Vidmlldy1zY3JpcHRzL0dyYXBoRXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0FBS3pDLE1BQU0sT0FBTyxXQUFXO0lBT2IsV0FBVyxDQUFDLElBQWUsRUFBRSxJQUFZO1FBRTVDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLElBQUksR0FBRztZQUNULE9BQU8sRUFBRSxTQUFTO1lBQ2xCLElBQUk7WUFDSixJQUFJO1lBQ0osR0FBRyxFQUFFLEdBQUcsQ0FBQyxTQUFTO1NBQ3JCLENBQUM7UUFFRixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFRTSxZQUFZLENBQUMsSUFBZSxFQUFFLElBQVk7UUFLN0MsSUFBSTtZQUNBLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFhLENBQUM7WUFDMUQsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNsRCxDQUFDLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUMsQ0FBQztZQUVILFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDbkQsQ0FBQyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7WUFFSCxZQUFZLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFdkUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWtlIExpc2Noa2UuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSVZTQ29kZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5kZWNsYXJlIGNvbnN0IGFjcXVpcmVWc0NvZGVBcGk6ICgpID0+IElWU0NvZGU7XHJcblxyXG5leHBvcnQgY29uc3QgdnNjb2RlID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xyXG5cclxuLyoqIFRoZXNlIHZhbHVlcyBkaXJlY3RseSBjb3JyZXNwb25kIHRvIHRoZSBzZXR0aW5ncyBzZWN0aW9uIG5hbWVzIGNvbnRhaW5pbmcgYSBcInNhdmVEaXJcIiBlbnRyeS4gKi9cclxuZXhwb3J0IHR5cGUgR3JhcGhUeXBlID0gXCJycmRcIiB8IFwiYXRuXCIgfCBcImNhbGwtZ3JhcGhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmFwaEV4cG9ydCB7XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHRoZSBTVkcgZXhwb3J0IGZvciBhIGdyYXBoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBncmFwaC5cclxuICAgICAqIEBwYXJhbSBuYW1lIEEgbmFtZSBmb3IgdGhhdCBncmFwaC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGV4cG9ydFRvU1ZHKHR5cGU6IEdyYXBoVHlwZSwgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgLy8gU2F2aW5nIHRoZSBTVkcgaXMgZGVsZWdhdGVkIHRvIHRoZSBleHRlbnNpb24gdG8gYWxsb3cgYXNraW5nIHRoZSB1c2VyIGZvciBhIHRhcmdldCBmaWxlLlxyXG4gICAgICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdmdcIilbMF07XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHtcclxuICAgICAgICAgICAgY29tbWFuZDogXCJzYXZlU1ZHXCIsXHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIHN2Zzogc3ZnLm91dGVySFRNTCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2c2NvZGUucG9zdE1lc3NhZ2UoYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB0aGUgSFRNTCBleHBvcnQgZm9yIGEgZ3JhcGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIGdyYXBoLlxyXG4gICAgICogQHBhcmFtIG5hbWUgQSBuYW1lIGZvciB0aGF0IGdyYXBoLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwb3J0VG9IVE1MKHR5cGU6IEdyYXBoVHlwZSwgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgLy8gV2hlbiBleHBvcnRpbmcgdGhlIEhUTUwgY29udGVudCB3ZSBoYXZlIHRvIHJlbW92ZSBvdXIgc2NyaXB0cyAoZS5nLiB0byBhdm9pZCBydW5uaW5nIGltYWdlXHJcbiAgICAgICAgLy8gZ2VuZXJhdGlvbiBhZ2FpbiB3aGljaCBoYXBwZW5lZCBhbHJlYWR5IGluIHZzY29kZSkgYW5kIG90aGVyIGludGVybmFsIGVsZW1lbnRzLlxyXG4gICAgICAgIC8vIEFkZGl0aW9uYWxseSB3ZSBoYXZlIHRvIG1ha2UgYWxsIHN0eWxlIHNoZWV0IHJlZmVyZW5jZXMgcmVsYXRpdmUuXHJcbiAgICAgICAgLy8gVGhhdCByZXF1aXJlcyBhIGRlZXAgY29weSBvZiB0aGUgZW50aXJlIERPTSB0byBhdm9pZCBtZXNzaW5nIHdpdGggdGhlIHdlYnZpZXcgZGlzcGxheS5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB3b3JrRG9jdW1lbnQgPSBkb2N1bWVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgIHdvcmtEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgd29ya0RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaGVhZGVyXCIpLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgd29ya0RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUuaHJlZiA9IGUuaHJlZi5yZXBsYWNlKC9eLipbXFxcXC9dLywgXCJcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IHdvcmtEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaHRtbFwiKVswXTtcclxuICAgICAgICAgICAgY29uc3QgYXJncyA9IHsgY29tbWFuZDogXCJzYXZlSFRNTFwiLCBuYW1lLCB0eXBlLCBodG1sOiBodG1sLm91dGVySFRNTCB9O1xyXG5cclxuICAgICAgICAgICAgdnNjb2RlLnBvc3RNZXNzYWdlKGFyZ3MpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHZzY29kZS5wb3N0TWVzc2FnZSh7IGNvbW1hbmQ6IFwiYWxlcnRcIiwgdGV4dDogXCJKUyBFcnJvcjogXCIgKyBTdHJpbmcoZXJyb3IpIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=