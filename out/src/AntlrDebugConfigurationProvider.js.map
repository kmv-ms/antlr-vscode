{"version":3,"file":"AntlrDebugConfigurationProvider.js","sourceRoot":"","sources":["../../src/AntlrDebugConfigurationProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,yCAA2B;AAE3B,mCAGgB;AAGhB,oEAAiE;AAMjE,MAAa,+BAA+B;IAGb;IAA8B;IAFjD,MAAM,CAAc;IAE5B,YAA2B,OAAoB,EAAU,iBAAoC;QAAlE,YAAO,GAAP,OAAO,CAAa;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAI,CAAC;IAE3F,yBAAyB,CAAC,MAAmC,EAAE,MAA0B,EAC5F,MAA0B;QAE1B,IAAI,kBAAS,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;YACjE,KAAK,eAAM,CAAC,gBAAgB,CAAC,kEAAkE;gBAC3F,4EAA4E,CAAC,CAAC;YAElF,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,EAAE;gBACtC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAEtB,CAAC,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAG,IAAI,qCAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACtF,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC7B,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAChB;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAqB,CAAC;QACtD,IAAI,IAAI,EAAE;YACN,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;SAClC;aAAM;YACH,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC;SAC1B;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,OAAO;QACV,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;SACvB;IACL,CAAC;CACJ;AA1CD,0EA0CC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as Net from \"net\";\r\n\r\nimport {\r\n    CancellationToken, DebugConfiguration, DebugConfigurationProvider, ProviderResult, workspace, WorkspaceFolder,\r\n    window,\r\n} from \"vscode\";\r\n\r\nimport { AntlrFacade } from \"./backend/facade\";\r\nimport { AntlrDebugSession } from \"./frontend/AntlrDebugAdapter\";\r\nimport { ParseTreeProvider } from \"./frontend/webviews/ParseTreeProvider\";\r\n\r\n/**\r\n * Validates launch configuration for grammar debugging.\r\n */\r\nexport class AntlrDebugConfigurationProvider implements DebugConfigurationProvider {\r\n    private server?: Net.Server;\r\n\r\n    public constructor(private backend: AntlrFacade, private parseTreeProvider: ParseTreeProvider) { }\r\n\r\n    public resolveDebugConfiguration(folder: WorkspaceFolder | undefined, config: DebugConfiguration,\r\n        _token?: CancellationToken): ProviderResult<DebugConfiguration> {\r\n\r\n        if (workspace.getConfiguration(\"antlr4.generation\").mode === \"none\") {\r\n            void window.showErrorMessage(\"Interpreter data generation is disabled in the preferences (see \" +\r\n                \"'antlr4.generation'). Set this at least to 'internal' to enable debugging.\");\r\n\r\n            return null;\r\n        }\r\n\r\n        if (!this.server) {\r\n            this.server = Net.createServer((socket) => {\r\n                socket.on(\"end\", () => {\r\n                    //console.error('>> ANTLR debugging client connection closed\\n');\r\n                });\r\n\r\n                const session = new AntlrDebugSession(folder, this.backend, [this.parseTreeProvider]);\r\n                session.setRunAsServer(true);\r\n                session.start(socket, socket);\r\n            }).listen(0);\r\n        }\r\n\r\n        const info = this.server.address() as Net.AddressInfo;\r\n        if (info) {\r\n            config.debugServer = info.port;\r\n        } else {\r\n            config.debugServer = 0;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.server) {\r\n            this.server.close();\r\n        }\r\n    }\r\n}\r\n"]}