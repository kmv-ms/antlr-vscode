{"version":3,"file":"BackendUtils.js","sourceRoot":"","sources":["../../../src/backend/BackendUtils.ts"],"names":[],"mappings":";;;AAMA,wCAAwD;AAExD,MAAa,YAAY;IAUd,MAAM,CAAC,qBAAqB,GAAG,CAAC,IAAe,EAAE,MAAc,EAAE,GAAW,EAAyB,EAAE;QAE1G,IAAI,IAAI,YAAY,mBAAY,EAAE;YAC9B,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC9B,IAAI,KAAK,CAAC,IAAI,KAAK,GAAG,EAAE;gBAAE,OAAO,SAAS,CAAC;aAAE;YAE7C,MAAM,SAAS,GAAG,KAAK,CAAC,kBAAkB,GAAG,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YACtF,IAAI,KAAK,CAAC,kBAAkB,IAAI,MAAM,IAAI,SAAS,IAAI,MAAM,EAAE;gBAC3D,OAAO,QAAQ,CAAC;aACnB;YAED,OAAO,SAAS,CAAC;SACpB;aAAM;YACH,MAAM,OAAO,GAAI,IAA0B,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBACjC,OAAO,SAAS,CAAC;aACpB;YAED,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE;gBACvG,OAAO,SAAS,CAAC;aACpB;YAED,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YAC3G,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,SAAS,GAAG,MAAM,CAAC,EAAE;gBAC9E,OAAO,SAAS,CAAC;aACpB;YAED,IAAI,OAAO,CAAC,QAAQ,EAAE;gBAClB,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE;oBAClC,MAAM,MAAM,GAAG,YAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;oBACtE,IAAI,MAAM,EAAE;wBACR,OAAO,MAAM,CAAC;qBACjB;iBACJ;aACJ;YAED,OAAO,OAAO,CAAC;SAElB;IACL,CAAC,CAAC;;AAlDO,oCAAY","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { ParserRuleContext } from \"antlr4ts\";\r\nimport { ParseTree, TerminalNode } from \"antlr4ts/tree\";\r\n\r\nexport class BackendUtils {\r\n    /**\r\n     * Get the lowest level parse tree, which covers the given position.\r\n     *\r\n     * @param root The start point to search from.\r\n     * @param column The position in the given row.\r\n     * @param row The row position to search for.\r\n     *\r\n     * @returns The parse tree which covers the given position or undefined if none could be found.\r\n     */\r\n    public static parseTreeFromPosition = (root: ParseTree, column: number, row: number): ParseTree | undefined => {\r\n        // Does the root node actually contain the position? If not we don't need to look further.\r\n        if (root instanceof TerminalNode) {\r\n            const terminal = (root);\r\n            const token = terminal.symbol;\r\n            if (token.line !== row) { return undefined; }\r\n\r\n            const tokenStop = token.charPositionInLine + (token.stopIndex - token.startIndex + 1);\r\n            if (token.charPositionInLine <= column && tokenStop >= column) {\r\n                return terminal;\r\n            }\r\n\r\n            return undefined;\r\n        } else {\r\n            const context = (root as ParserRuleContext);\r\n            if (!context.start || !context.stop) { // Invalid tree?\r\n                return undefined;\r\n            }\r\n\r\n            if (context.start.line > row || (context.start.line === row && column < context.start.charPositionInLine)) {\r\n                return undefined;\r\n            }\r\n\r\n            const tokenStop = context.stop.charPositionInLine + (context.stop.stopIndex - context.stop.startIndex + 1);\r\n            if (context.stop.line < row || (context.stop.line === row && tokenStop < column)) {\r\n                return undefined;\r\n            }\r\n\r\n            if (context.children) {\r\n                for (const child of context.children) {\r\n                    const result = BackendUtils.parseTreeFromPosition(child, column, row);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return context;\r\n\r\n        }\r\n    };\r\n\r\n}\r\n"]}