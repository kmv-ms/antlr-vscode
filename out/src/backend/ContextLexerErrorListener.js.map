{"version":3,"file":"ContextLexerErrorListener.js","sourceRoot":"","sources":["../../../src/backend/ContextLexerErrorListener.ts"],"names":[],"mappings":";;;;;;;;;AAOA,oDAA+C;AAC/C,mCAA2D;AAE3D,MAAa,yBAAyB;IACP;IAA3B,YAA2B,SAA6B;QAA7B,cAAS,GAAT,SAAS,CAAoB;IACxD,CAAC;IAIM,WAAW,CAAmB,UAA8B,EAAE,eAA8B,EAAE,IAAY,EAC7G,kBAA0B,EAAE,GAAW,EAAE,EAAoC;QAC7E,MAAM,KAAK,GAAqB;YAC5B,IAAI,EAAE,sBAAc,CAAC,KAAK;YAC1B,OAAO,EAAE,GAAG;YACZ,KAAK,EAAE;gBACH,KAAK,EAAE;oBACH,MAAM,EAAE,kBAAkB;oBAC1B,GAAG,EAAE,IAAI;iBACZ;gBACD,GAAG,EAAE;oBACD,MAAM,EAAE,kBAAkB,GAAG,CAAC;oBAC9B,GAAG,EAAE,IAAI;iBACZ;aACJ;SACJ,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;CACJ;AAnBU;IAFN,qBAAQ;4DAoBR;AAxBL,8DAyBC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { ANTLRErrorListener, Recognizer, RecognitionException } from \"antlr4ts\";\r\n\r\nimport { Override } from \"antlr4ts/Decorators\";\r\nimport { IDiagnosticEntry, DiagnosticType } from \"./types\";\r\n\r\nexport class ContextLexerErrorListener implements ANTLRErrorListener<number> {\r\n    public constructor(private errorList: IDiagnosticEntry[]) {\r\n    }\r\n\r\n    @Override\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public syntaxError<T extends number>(recognizer: Recognizer<T, any>, offendingSymbol: T | undefined, line: number,\r\n        charPositionInLine: number, msg: string, _e: RecognitionException | undefined): void {\r\n        const error: IDiagnosticEntry = {\r\n            type: DiagnosticType.Error,\r\n            message: msg,\r\n            range: {\r\n                start: {\r\n                    column: charPositionInLine,\r\n                    row: line,\r\n                },\r\n                end: {\r\n                    column: charPositionInLine + 1,\r\n                    row: line,\r\n                },\r\n            },\r\n        };\r\n\r\n        this.errorList.push(error);\r\n    }\r\n}\r\n"]}