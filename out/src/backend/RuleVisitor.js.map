{"version":3,"file":"RuleVisitor.js","sourceRoot":"","sources":["../../../src/backend/RuleVisitor.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * The MIT License (MIT)\r\n * http://opensource.org/licenses/MIT\r\n *\r\n * Copyright (c) 2014 Bart Kiers\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n*/\r\n\r\n/*\r\n * Translated to TS and modified by Mike Lischke.\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { AbstractParseTreeVisitor, TerminalNode } from \"antlr4ts/tree\";\r\nimport { ANTLRv4ParserVisitor } from \"../parser/ANTLRv4ParserVisitor\";\r\nimport { ANTLRv4Lexer } from \"../parser/ANTLRv4Lexer\";\r\nimport {\r\n    ParserRuleSpecContext, RuleAltListContext, LexerRuleSpecContext, LexerAltListContext, LexerAltContext,\r\n    LexerElementsContext, LexerElementContext, LabeledLexerElementContext, AltListContext, AlternativeContext,\r\n    ElementContext, LabeledElementContext, EbnfContext, EbnfSuffixContext, LexerAtomContext, AtomContext,\r\n    NotSetContext, BlockSetContext, CharacterRangeContext, TerminalRuleContext, SetElementContext,\r\n\r\n    RuleBlockContext, LexerRuleBlockContext, ElementOptionsContext,\r\n} from \"../parser/ANTLRv4Parser\";\r\n\r\nexport class RuleVisitor extends AbstractParseTreeVisitor<string> implements ANTLRv4ParserVisitor<string> {\r\n\r\n    public constructor(private scripts: Map<string, string>) {\r\n        super();\r\n    }\r\n\r\n    public defaultResult(): string {\r\n        return \"\";\r\n    }\r\n\r\n    public visitParserRuleSpec(ctx: ParserRuleSpecContext): string {\r\n        if (!ctx.tryGetRuleContext(0, RuleBlockContext)) {\r\n            return \"# Syntax Error #\";\r\n        }\r\n\r\n        const diagram = \"ComplexDiagram(\" + this.visitRuleAltList(ctx.ruleBlock().ruleAltList()) + \").addTo()\";\r\n        this.scripts.set(ctx.RULE_REF().text, diagram);\r\n\r\n        return diagram;\r\n    }\r\n\r\n    public visitRuleAltList = (ctx: RuleAltListContext): string => {\r\n        let script = \"Choice(0\";\r\n        const alternatives = ctx.labeledAlt();\r\n        for (const alternative of alternatives) {\r\n            script += \", \" + this.visitAlternative(alternative.alternative());\r\n        }\r\n\r\n        return script + \")\";\r\n    };\r\n\r\n    public visitLexerRuleSpec = (ctx: LexerRuleSpecContext): string => {\r\n        if (!ctx.tryGetRuleContext(0, LexerRuleBlockContext)) {\r\n            return \"# Syntax Error #\";\r\n        }\r\n\r\n        const diagram = \"Diagram(\" + this.visitLexerAltList(ctx.lexerRuleBlock()!.lexerAltList()) + \").addTo()\";\r\n\r\n        this.scripts.set(ctx.TOKEN_REF().text, diagram);\r\n\r\n        return diagram;\r\n    };\r\n\r\n    public visitLexerAltList = (ctx: LexerAltListContext): string => {\r\n        let script = \"Choice(0\";\r\n\r\n        for (const alternative of ctx.lexerAlt()) {\r\n            script += \", \" + this.visitLexerAlt(alternative);\r\n        }\r\n\r\n        return script + \")\";\r\n    };\r\n\r\n    public visitLexerAlt = (ctx: LexerAltContext): string => {\r\n        if (ctx.lexerElements()) {\r\n            return this.visitLexerElements(ctx.lexerElements()!);\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    public visitLexerElements = (ctx: LexerElementsContext): string => {\r\n        let script = \"\";\r\n\r\n        for (const element of ctx.lexerElement()) {\r\n            if (script.length > 0) {\r\n                script += \", \";\r\n            }\r\n            script += this.visitLexerElement(element);\r\n        }\r\n\r\n        return \"Sequence(\" + script + \")\";\r\n    };\r\n\r\n    public visitLexerElement = (ctx: LexerElementContext): string => {\r\n        const hasEbnfSuffix = (ctx.ebnfSuffix() !== undefined);\r\n\r\n        if (ctx.labeledLexerElement()) {\r\n            if (hasEbnfSuffix) {\r\n                return this.visitEbnfSuffix(ctx.ebnfSuffix()!) + \"(\" +\r\n                    this.visitLabeledLexerElement(ctx.labeledLexerElement()!) + \")\";\r\n            } else {\r\n                return this.visitLabeledLexerElement(ctx.labeledLexerElement()!);\r\n            }\r\n        } else if (ctx.lexerAtom()) {\r\n            if (hasEbnfSuffix) {\r\n                return this.visitEbnfSuffix(ctx.ebnfSuffix()!) + \"(\" + this.visitLexerAtom(ctx.lexerAtom()!) + \")\";\r\n            } else {\r\n                return this.visitLexerAtom(ctx.lexerAtom()!);\r\n            }\r\n        } else if (ctx.lexerBlock()) {\r\n            if (hasEbnfSuffix) {\r\n                return this.visitEbnfSuffix(ctx.ebnfSuffix()!) + \"(\" +\r\n                    this.visitLexerAltList(ctx.lexerBlock()!.lexerAltList()) + \")\";\r\n            } else {\r\n                return this.visitLexerAltList(ctx.lexerBlock()!.lexerAltList());\r\n            }\r\n        } else if (ctx.QUESTION()) {\r\n            return \"Comment('\" + ctx.actionBlock()!.text + \"?')\";\r\n        } else {\r\n            return \"Comment('{ action code }')\";\r\n        }\r\n    };\r\n\r\n    public visitLabeledLexerElement = (ctx: LabeledLexerElementContext): string => {\r\n        if (ctx.lexerAtom()) {\r\n            return this.visitLexerAtom(ctx.lexerAtom()!);\r\n        } else if (ctx.block()) {\r\n            return this.visitAltList(ctx.block()!.altList());\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    public visitAltList = (ctx: AltListContext): string => {\r\n        let script = \"Choice(0\";\r\n        for (const alternative of ctx.alternative()) {\r\n            script += \", \" + this.visitAlternative(alternative);\r\n        }\r\n\r\n        return script + \")\";\r\n    };\r\n\r\n    public visitAlternative = (ctx: AlternativeContext): string => {\r\n        let script = \"\";\r\n\r\n        const optionsContext = ctx.elementOptions();\r\n        if (optionsContext) {\r\n            script += this.visitElementOptions(optionsContext);\r\n        }\r\n\r\n        for (const element of ctx.element()) {\r\n            if (script.length > 0) {\r\n                script += \", \";\r\n            }\r\n            script += this.visitElement(element);\r\n        }\r\n\r\n        return \"Sequence(\" + script + \")\";\r\n    };\r\n\r\n    public visitElement = (ctx: ElementContext): string => {\r\n        const hasEbnfSuffix = (ctx.ebnfSuffix() !== undefined);\r\n\r\n        if (ctx.labeledElement()) {\r\n            if (hasEbnfSuffix) {\r\n                return this.visitEbnfSuffix(ctx.ebnfSuffix()!) + \"(\" +\r\n                    this.visitLabeledElement(ctx.labeledElement()!) + \")\";\r\n            } else {\r\n                return this.visitLabeledElement(ctx.labeledElement()!);\r\n            }\r\n        } else if (ctx.atom()) {\r\n            if (hasEbnfSuffix) {\r\n                return this.visitEbnfSuffix(ctx.ebnfSuffix()!) + \"(\" + this.visitAtom(ctx.atom()!) + \")\";\r\n            } else {\r\n                return this.visitAtom(ctx.atom()!);\r\n            }\r\n        } else if (ctx.ebnf()) {\r\n            return this.visitEbnf(ctx.ebnf()!);\r\n        } else if (ctx.QUESTION()) {\r\n            return \"Comment('\" + ctx.actionBlock()!.text + \"?')\";\r\n        } else {\r\n            return \"Comment('{ action code }')\";\r\n        }\r\n    };\r\n\r\n    public visitElementOptions = (ctx: ElementOptionsContext): string => {\r\n        return \"Comment('\" + ctx.text + \"')\";\r\n    };\r\n\r\n    public visitLabeledElement = (ctx: LabeledElementContext): string => {\r\n        if (ctx.atom()) {\r\n            return this.visitAtom(ctx.atom()!);\r\n        } else {\r\n            return this.visitAltList(ctx.block()!.altList());\r\n        }\r\n    };\r\n\r\n    public visitEbnf = (ctx: EbnfContext): string => {\r\n        if (!ctx.block()) {\r\n            return \"# Syntax Error #\";\r\n        }\r\n\r\n        if (ctx.blockSuffix()) {\r\n            return this.visitEbnfSuffix(ctx.blockSuffix()!.ebnfSuffix()) + \"(\" +\r\n                this.visitAltList(ctx.block()!.altList()) + \")\";\r\n        } else {\r\n            return this.visitAltList(ctx.block()!.altList());\r\n        }\r\n    };\r\n\r\n    public visitEbnfSuffix = (ctx: EbnfSuffixContext): string => {\r\n        const text = ctx.text;\r\n\r\n        if (text === \"?\") {\r\n            return \"Optional\";\r\n        } else if (text === \"*\") {\r\n            return \"ZeroOrMore\";\r\n        } else {\r\n            return \"OneOrMore\";\r\n        }\r\n    };\r\n\r\n    public visitLexerAtom = (ctx: LexerAtomContext): string => {\r\n        if (ctx.characterRange()) {\r\n            return this.visitCharacterRange(ctx.characterRange()!);\r\n        } else if (ctx.terminalRule()) {\r\n            return this.visitTerminalRule(ctx.terminalRule()!);\r\n        } else if (ctx.notSet()) {\r\n            return this.visitNotSet(ctx.notSet()!);\r\n        } else if (ctx.LEXER_CHAR_SET()) {\r\n            return this.visitTerminal(ctx.LEXER_CHAR_SET()!);\r\n        }\r\n\r\n        const options = ctx.elementOptions();\r\n        if (options) {\r\n            const text = this.visitElementOptions(options);\r\n            if (text !== \"\") {\r\n                return \"Sequence(Terminal('any char'), Comment(\" + text + \")\";\r\n            }\r\n        }\r\n\r\n        return \"Terminal('any char')\";\r\n    };\r\n\r\n    public visitAtom = (ctx: AtomContext): string => {\r\n        if (ctx.characterRange()) {\r\n            return this.visitCharacterRange(ctx.characterRange()!);\r\n        } else if (ctx.terminalRule()) {\r\n            return this.visitTerminalRule(ctx.terminalRule()!);\r\n        } else if (ctx.ruleref()) {\r\n            return this.visitTerminal(ctx.ruleref()!.RULE_REF());\r\n        } else if (ctx.notSet()) {\r\n            return this.visitNotSet(ctx.notSet()!);\r\n        }\r\n\r\n        const options = ctx.elementOptions();\r\n        if (options) {\r\n            const text = this.visitElementOptions(options);\r\n            if (text !== \"\") {\r\n                return \"Sequence(NonTerminal('any token'), Comment(\" + text + \")\";\r\n            }\r\n        }\r\n\r\n        return \"NonTerminal('any token')\";\r\n    };\r\n\r\n    public visitNotSet = (ctx: NotSetContext): string => {\r\n        if (ctx.setElement() != null) {\r\n            return \"Sequence(Comment('not'), \" + this.visitSetElement(ctx.setElement()!) + \")\";\r\n        } else {\r\n            return \"Sequence(Comment('not'), \" + this.visitBlockSet(ctx.blockSet()!) + \")\";\r\n        }\r\n    };\r\n\r\n    public visitBlockSet = (ctx: BlockSetContext): string => {\r\n        let script = \"Choice(0\";\r\n        for (const element of ctx.setElement()) {\r\n            script += \", \" + this.visitSetElement(element);\r\n        }\r\n\r\n        return script + \")\";\r\n    };\r\n\r\n    public visitSetElement = (ctx: SetElementContext): string => {\r\n        if (ctx.characterRange()) {\r\n            return this.visitCharacterRange(ctx.characterRange()!);\r\n        } else if (ctx.TOKEN_REF()) {\r\n            return this.visitTerminal(ctx.TOKEN_REF()!);\r\n        } else if (ctx.STRING_LITERAL()) {\r\n            return this.visitTerminal(ctx.STRING_LITERAL()!);\r\n        }\r\n\r\n        return this.visitTerminal(ctx.LEXER_CHAR_SET()!);\r\n    };\r\n\r\n    public visitCharacterRange = (ctx: CharacterRangeContext): string => {\r\n        // The second literal can be non-existing (e.g. if not properly quoted).\r\n        if (ctx.STRING_LITERAL().length > 1) {\r\n            return this.escapeTerminal(ctx.STRING_LITERAL(0)) + \" .. \" + this.escapeTerminal(ctx.STRING_LITERAL(1));\r\n        }\r\n\r\n        return this.escapeTerminal(ctx.STRING_LITERAL(0)) + \" .. ?\";\r\n    };\r\n\r\n    public visitTerminalRule = (ctx: TerminalRuleContext): string => {\r\n        if (ctx.TOKEN_REF()) {\r\n            return this.visitTerminal(ctx.TOKEN_REF()!);\r\n        } else {\r\n            return this.visitTerminal(ctx.STRING_LITERAL()!);\r\n        }\r\n    };\r\n\r\n    public override visitTerminal = (node: TerminalNode): string => {\r\n        switch (node.symbol.type) {\r\n            case ANTLRv4Lexer.STRING_LITERAL:\r\n            case ANTLRv4Lexer.LEXER_CHAR_SET:\r\n                return \"Terminal('\" + this.escapeTerminal(node) + \"')\";\r\n\r\n            case ANTLRv4Lexer.TOKEN_REF:\r\n                return \"Terminal('\" + node.text + \"')\";\r\n\r\n            default:\r\n                return \"NonTerminal('\" + node.text + \"')\";\r\n        }\r\n    };\r\n\r\n    private escapeTerminal(node: TerminalNode): string {\r\n        const text = node.text;\r\n        const escaped = text.replace(/\\\\/g, \"\\\\\\\\\");\r\n\r\n        switch (node.symbol.type) {\r\n            case ANTLRv4Lexer.STRING_LITERAL:\r\n                return \"\\\\'\" + escaped.substring(1, escaped.length - 1).replace(/'/g, \"\\\\'\") + \"\\\\'\";\r\n            default:\r\n                return escaped.replace(/'/g, \"\\\\'\");\r\n        }\r\n    }\r\n}\r\n"]}