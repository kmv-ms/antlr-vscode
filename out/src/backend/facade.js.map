{"version":3,"file":"facade.js","sourceRoot":"","sources":["../../../src/backend/facade.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport { Vocabulary } from \"antlr4ts\";\r\n\r\nexport interface IContextEntry {\r\n    context: SourceContext;\r\n    refCount: number;\r\n    dependencies: string[];\r\n    grammar: string; // The grammar file name.\r\n}\r\n\r\n// Import modules that depend on these enums after their definition, to allow for static initializations.\r\nimport { SourceContext } from \"./SourceContext\";\r\nimport { GrammarDebugger } from \"./GrammarDebugger\";\r\nimport {\r\n    ISelfDiagnostics, ISymbolInfo, CodeActionType, IDiagnosticEntry, IReferenceNode, IGenerationOptions,\r\n    ISentenceGenerationOptions, IFormattingOptions, IContextDetails,\r\n} from \"./types\";\r\nimport { IATNGraphData } from \"../webview-scripts/types\";\r\n\r\nexport class AntlrFacade {\r\n    // Mapping file names to SourceContext instances.\r\n    private sourceContexts: Map<string, IContextEntry> = new Map<string, IContextEntry>();\r\n\r\n    public constructor(private importDir: string, private extensionDir: string) {\r\n    }\r\n\r\n    /**\r\n     * Info for unit tests.\r\n     *\r\n     * @returns An object with interesting details (currently only the number of existing contexts).\r\n     */\r\n    public getSelfDiagnostics(): ISelfDiagnostics {\r\n        return {\r\n            contextCount: this.sourceContexts.keys.length,\r\n        };\r\n    }\r\n\r\n    public getContext(fileName: string, source?: string | undefined): SourceContext {\r\n        const contextEntry = this.sourceContexts.get(fileName);\r\n        if (!contextEntry) {\r\n            return this.loadGrammar(fileName, source);\r\n        }\r\n\r\n        return contextEntry.context;\r\n    }\r\n\r\n    /**\r\n     * Call this to refresh the internal input stream as a preparation to a reparse call\r\n     * or for code completion.\r\n     * Does nothing if no grammar has been loaded for that file name.\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @param source The grammar code.\r\n     */\r\n    public setText(fileName: string, source: string): void {\r\n        const contextEntry = this.sourceContexts.get(fileName);\r\n        if (contextEntry) {\r\n            contextEntry.context.setText(source);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggers a parse run for the given file name. This grammar must have been loaded before.\r\n     *\r\n     * @param fileName The grammar file name.\r\n     */\r\n    public reparse(fileName: string): void {\r\n        const contextEntry = this.sourceContexts.get(fileName);\r\n        if (contextEntry) {\r\n            this.parseGrammar(contextEntry);\r\n        }\r\n    }\r\n\r\n    public loadGrammar(fileName: string, source?: string): SourceContext {\r\n        let contextEntry = this.sourceContexts.get(fileName);\r\n        if (!contextEntry) {\r\n            if (!source) {\r\n                try {\r\n                    fs.statSync(fileName);\r\n                    source = fs.readFileSync(fileName, \"utf8\");\r\n                } catch (e) {\r\n                    source = \"\";\r\n                }\r\n            }\r\n\r\n            const context = new SourceContext(fileName, this.extensionDir);\r\n            contextEntry = { context, refCount: 0, dependencies: [], grammar: fileName };\r\n            this.sourceContexts.set(fileName, contextEntry);\r\n\r\n            // Do an initial parse run and load all dependencies of this context\r\n            // and pass their references to this context.\r\n            context.setText(source);\r\n            this.parseGrammar(contextEntry);\r\n        }\r\n        contextEntry.refCount++;\r\n\r\n        return contextEntry.context;\r\n    }\r\n\r\n    public releaseGrammar(fileName: string): void {\r\n        this.internalReleaseGrammar(fileName);\r\n    }\r\n\r\n    public symbolInfoAtPosition(fileName: string, column: number, row: number,\r\n        limitToChildren = true): ISymbolInfo | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.symbolAtPosition(column, row, limitToChildren);\r\n    }\r\n\r\n    public infoForSymbol(fileName: string, symbol: string): ISymbolInfo | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getSymbolInfo(symbol);\r\n    }\r\n\r\n    public enclosingSymbolAtPosition(fileName: string, column: number, row: number,\r\n        ruleScope = false): ISymbolInfo | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.enclosingSymbolAtPosition(column, row, ruleScope);\r\n    }\r\n\r\n    /**\r\n     * Returns a list of top level symbols from a file (and optionally its dependencies).\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @param fullList If true, includes symbols from all dependencies as well.\r\n     * @returns A list of symbol info entries.\r\n     */\r\n    public listTopLevelSymbols(fileName: string, fullList: boolean): ISymbolInfo[] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.listTopLevelSymbols(!fullList);\r\n    }\r\n\r\n    /**\r\n     * Returns the vocabulary for the given file (if it contains lexer rules).\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @returns The vocabulary if found.\r\n     */\r\n    public getLexerVocabulary(fileName: string): Vocabulary | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getVocabulary();\r\n    }\r\n\r\n    /**\r\n     * Returns a list of rule names for the given file (if it contains parser rules).\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @returns The list of rule names.\r\n     */\r\n    public getRuleList(fileName: string): string[] | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getRuleList();\r\n    }\r\n\r\n    /**\r\n     * Returns a list of channel names for the given file (if it contains lexer rules).\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @returns The list of channel names.\r\n     */\r\n    public getChannels(fileName: string): string[] | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getChannels();\r\n    }\r\n\r\n    /**\r\n     * Returns a list of lexer modes for the given file (if it contains lexer rules).\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @returns The list of mode names.\r\n     */\r\n    public getModes(fileName: string): string[] | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getModes();\r\n    }\r\n\r\n    /**\r\n     * Returns a list of actions found in the given file.\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @param type The of actions to return.\r\n     * @returns The list of actions.\r\n     */\r\n    public listActions(fileName: string, type: CodeActionType): ISymbolInfo[] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.listActions(type);\r\n    }\r\n\r\n    public getActionCounts(fileName: string): Map<CodeActionType, number> {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getActionCounts();\r\n    }\r\n\r\n    public async getCodeCompletionCandidates(fileName: string, column: number, row: number): Promise<ISymbolInfo[]> {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getCodeCompletionCandidates(column, row);\r\n    }\r\n\r\n    public getDiagnostics(fileName: string): IDiagnosticEntry[] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getDiagnostics();\r\n    }\r\n\r\n    public ruleFromPosition(fileName: string, column: number, row: number): [string | undefined, number | undefined] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.ruleFromPosition(column, row);\r\n    }\r\n\r\n    /**\r\n     * Count how many times a symbol has been referenced. The given file must contain the definition of this symbol.\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @param symbol The symbol for which to determine the reference count.\r\n     * @returns The reference count.\r\n     */\r\n    public countReferences(fileName: string, symbol: string): number {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getReferenceCount(symbol);\r\n    }\r\n\r\n    /**\r\n     * Determines source file and position of all occurrences of the given symbol. The search includes\r\n     * also all referencing and referenced contexts.\r\n     *\r\n     * @param fileName The grammar file name.\r\n     * @param symbolName The name of the symbol to check.\r\n     * @returns A list of symbol info entries, each describing one occurrence.\r\n     */\r\n    public getSymbolOccurrences(fileName: string, symbolName: string): ISymbolInfo[] {\r\n        const context = this.getContext(fileName);\r\n        const result = context.symbolTable.getSymbolOccurrences(symbolName, false);\r\n\r\n        // Sort result by kind. This way rule definitions appear before rule references and are re-parsed first.\r\n        return result.sort((lhs: ISymbolInfo, rhs: ISymbolInfo) => {\r\n            return lhs.kind - rhs.kind;\r\n        });\r\n    }\r\n\r\n    public getDependencies(fileName: string): string[] {\r\n        const entry = this.sourceContexts.get(fileName);\r\n        if (!entry) {\r\n            return [];\r\n        }\r\n        const dependencies: Set<SourceContext> = new Set();\r\n        this.pushDependencyFiles(entry, dependencies);\r\n\r\n        const result: string[] = [];\r\n        for (const dep of dependencies) {\r\n            result.push(dep.fileName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getReferenceGraph(fileName: string): Map<string, IReferenceNode> {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getReferenceGraph();\r\n    }\r\n\r\n    public getRRDScript(fileName: string, rule: string): string {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getRRDScript(rule) || \"\";\r\n    }\r\n\r\n    public generate(fileName: string, options: IGenerationOptions): Promise<string[]> {\r\n        const context = this.getContext(fileName);\r\n        const dependencies: Set<SourceContext> = new Set();\r\n        this.pushDependencyFiles(this.sourceContexts.get(fileName)!, dependencies);\r\n\r\n        return context.generate(dependencies, options);\r\n    }\r\n\r\n    public getATNGraph(fileName: string, rule: string): IATNGraphData | undefined {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.getATNGraph(rule);\r\n    }\r\n\r\n    public generateSentence(fileName: string, rule: string, options: ISentenceGenerationOptions,\r\n        callback: (sentence: string, index: number) => void): void {\r\n        const context = this.getContext(fileName);\r\n\r\n        const dependencies = new Set<SourceContext>();\r\n        this.pushDependencyFiles(this.sourceContexts.get(fileName)!, dependencies);\r\n\r\n        const basePath = path.dirname(fileName);\r\n\r\n        for (const dependency of dependencies) {\r\n            if (dependency.hasErrors) {\r\n                callback(\"[Fix grammar errors first]\", 0);\r\n\r\n                return;\r\n            }\r\n\r\n            if (!dependency.isInterpreterDataLoaded) {\r\n                const errors = dependency.setupInterpreters(path.join(basePath, \".antlr\"));\r\n                if (errors.length > 0) {\r\n                    callback(errors, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        context.generateSentence(dependencies, rule, options, callback);\r\n    }\r\n\r\n    public lexTestInput(fileName: string, input: string, actionFile?: string): [string[], string] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.lexTestInput(input, actionFile);\r\n    }\r\n\r\n    public parseTestInput(fileName: string, input: string, startRule: string, actionFile?: string): string[] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.parseTestInput(input, startRule, actionFile);\r\n    }\r\n\r\n    public formatGrammar(fileName: string, options: IFormattingOptions, start: number,\r\n        stop: number): [string, number, number] {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.formatGrammar(options, start, stop);\r\n    }\r\n\r\n    public hasErrors(fileName: string): boolean {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.hasErrors;\r\n    }\r\n\r\n    public createDebugger(fileName: string, actionFile: string, dataDir: string): GrammarDebugger | undefined {\r\n        const context = this.getContext(fileName);\r\n        if (!context) {\r\n            return;\r\n        }\r\n\r\n        const contexts: Set<SourceContext> = new Set();\r\n        contexts.add(context);\r\n        this.pushDependencyFiles(this.sourceContexts.get(fileName)!, contexts);\r\n\r\n        for (const dependency of contexts) {\r\n            if (dependency.hasErrors) {\r\n                return;\r\n            }\r\n\r\n            if (!dependency.isInterpreterDataLoaded) {\r\n                const errors = dependency.setupInterpreters(dataDir);\r\n                if (errors.length > 0) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return new GrammarDebugger([...contexts], actionFile);\r\n    }\r\n\r\n    public getContextDetails(fileName: string): IContextDetails {\r\n        const context = this.getContext(fileName);\r\n\r\n        return context.info;\r\n    }\r\n\r\n    private loadDependency(contextEntry: IContextEntry, depName: string): SourceContext | undefined {\r\n        // The given import dir is used to locate the dependency (either relative to the base path or via an\r\n        // absolute path).\r\n        // If we cannot find the grammar file that way we try the base folder.\r\n        const basePath = path.dirname(contextEntry.grammar);\r\n        const fullPath = path.isAbsolute(this.importDir) ? this.importDir : path.join(basePath, this.importDir);\r\n        try {\r\n            const depPath = path.join(fullPath, depName + \".g4\");\r\n            fs.accessSync(depPath, fs.constants.R_OK);\r\n            // Target path can be read. Now check the target file.\r\n            contextEntry.dependencies.push(depPath);\r\n\r\n            return this.loadGrammar(depPath);\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n\r\n        // File not found. Try other extension.\r\n        try {\r\n            const depPath = path.join(fullPath, depName + \".g\");\r\n            fs.accessSync(depPath, fs.constants.R_OK);\r\n            // Target path can be read. Now check the target file.\r\n            contextEntry.dependencies.push(depPath);\r\n\r\n            return this.loadGrammar(depPath);\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n\r\n        // Couldn't find it in the import folder. Use the base then.\r\n        try {\r\n            const depPath = path.join(basePath, depName + \".g4\");\r\n            fs.statSync(depPath);\r\n            contextEntry.dependencies.push(depPath);\r\n\r\n            return this.loadGrammar(depPath);\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n\r\n        try {\r\n            const depPath = path.join(basePath, depName + \".g\");\r\n            fs.statSync(depPath);\r\n            contextEntry.dependencies.push(depPath);\r\n\r\n            return this.loadGrammar(depPath);\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n\r\n        // Ignore the dependency if we cannot find the source file for it.\r\n        return undefined;\r\n    }\r\n\r\n    private parseGrammar(contextEntry: IContextEntry) {\r\n        const oldDependencies = contextEntry.dependencies;\r\n        contextEntry.dependencies = [];\r\n        const newDependencies = contextEntry.context.parse();\r\n\r\n        for (const dep of newDependencies) {\r\n            const depContext = this.loadDependency(contextEntry, dep);\r\n            if (depContext) { contextEntry.context.addAsReferenceTo(depContext); }\r\n        }\r\n\r\n        // Release all old dependencies. This will only unload grammars which have\r\n        // not been ref-counted by the above dependency loading (or which are not used by other\r\n        // grammars).\r\n        for (const dep of oldDependencies) { this.releaseGrammar(dep); }\r\n    }\r\n\r\n    private internalReleaseGrammar(fileName: string, referencing?: IContextEntry): void {\r\n        const contextEntry = this.sourceContexts.get(fileName);\r\n        if (contextEntry) {\r\n            if (referencing) {\r\n                // If a referencing context is given remove this one from the reference's dependencies list,\r\n                // which in turn will remove the referencing context from the dependency's referencing list.\r\n                referencing.context.removeDependency(contextEntry.context);\r\n            }\r\n\r\n            contextEntry.refCount--;\r\n            if (contextEntry.refCount === 0) {\r\n                this.sourceContexts.delete(fileName);\r\n\r\n                // Release also all dependencies.\r\n                for (const dep of contextEntry.dependencies) {\r\n                    this.internalReleaseGrammar(dep, contextEntry);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private pushDependencyFiles(entry: IContextEntry, contexts: Set<SourceContext>) {\r\n        // Using a set for the context list here, to automatically exclude duplicates.\r\n        for (const dep of entry.dependencies) {\r\n            const depEntry = this.sourceContexts.get(dep);\r\n            if (depEntry) {\r\n                this.pushDependencyFiles(depEntry, contexts);\r\n                contexts.add(depEntry.context);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n"]}