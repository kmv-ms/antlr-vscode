{"version":3,"file":"CompletionItemProvider.js","sourceRoot":"","sources":["../../../src/frontend/CompletionItemProvider.ts"],"names":[],"mappings":";;;AAKA,mCAEgB;AAEhB,qCAAmD;AAGnD,MAAM,QAAQ,GAAG;IACb,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;CACP,CAAC;AAGF,MAAM,OAAO,GAAG;IACZ,SAAS;IACT,SAAS;IACT,SAAS;IACT,sBAAsB;IACtB,qBAAqB;IACrB,sBAAsB;IACtB,aAAa;IACb,qBAAqB;IACrB,YAAY;IACZ,wBAAwB;IACxB,eAAe;IACf,aAAa;IACb,QAAQ;IACR,WAAW;IACX,UAAU;IACV,gBAAgB;CACnB,CAAC;AAEF,MAAa,2BAA2B;IACT;IAA3B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,sBAAsB,CAAC,QAAsB,EAAE,QAAkB,EACpE,MAAyB;QAEzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC;iBAC7F,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;gBACjB,MAAM,cAAc,GAAqB,EAAE,CAAC;gBAC5C,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBACxB,MAAM,IAAI,GAAG,IAAI,uBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAA,gCAAuB,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC/E,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;oBAChD,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEvF,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBAEH,OAAO,CAAC,IAAI,uBAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChB,MAAM,CAAC,MAAM,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAxBD,kEAwBC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport {\r\n    TextDocument, Position, CancellationToken, CompletionItem, ProviderResult, CompletionList,\r\n} from \"vscode\";\r\nimport { AntlrFacade } from \"../backend/facade\";\r\nimport { translateCompletionKind } from \"./Symbol\";\r\n\r\n// Determines the sort order in the completion list. One value for each SymbolKind.\r\nconst sortKeys = [\r\n    \"01\", // Keyword\r\n    \"06\", // TokenVocab\r\n    \"07\", // Import\r\n    \"03\", // BuiltInLexerToken\r\n    \"03\", // VirtualLexerToken\r\n    \"03\", // FragmentLexerToken\r\n    \"03\", // LexerToken\r\n    \"05\", // BuiltInMode\r\n    \"05\", // LexerMode\r\n    \"02\", // BuiltInChannel\r\n    \"02\", // TokenChannel\r\n    \"04\", // ParserRule\r\n    \"08\", // Action\r\n    \"09\", // Predicate\r\n    \"00\", // Operator\r\n    \"10\", // Option\r\n];\r\n\r\n// Descriptions for each symbol kind.\r\nconst details = [\r\n    \"Keyword\",                // Keyword\r\n    undefined,                // TokenVocab\r\n    undefined,                // Import\r\n    \"Built-in lexer token\",   // BuiltInLexerToken\r\n    \"Virtual lexer token\",    // VirtualLexerToken\r\n    \"Fragment lexer token\",   // FragmentLexerToken\r\n    \"Lexer token\",            // LexerToken\r\n    \"Built-in lexer mode\",    // BuiltInMode\r\n    \"Lexer mode\",             // LexerMode\r\n    \"Built-in token channel\", // BuiltInChannel\r\n    \"Token channel\",          // TokenChannel\r\n    \"Parser rule\",            // ParserRule\r\n    \"Action\",                 // Action\r\n    \"Predicate\",              // Predicate\r\n    \"Operator\",               // Operators usually come with an own description from the backend.\r\n    \"Grammar option\",\r\n];\r\n\r\nexport class AntlrCompletionItemProvider {\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public provideCompletionItems(document: TextDocument, position: Position,\r\n        _token: CancellationToken): ProviderResult<CompletionList> {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.backend.getCodeCompletionCandidates(document.fileName, position.character, position.line + 1)\r\n                .then((candidates) => {\r\n                    const completionList: CompletionItem[] = [];\r\n                    candidates.forEach((info) => {\r\n                        const item = new CompletionItem(info.name, translateCompletionKind(info.kind));\r\n                        item.sortText = sortKeys[info.kind] + info.name;\r\n                        item.detail = (info.description !== undefined) ? info.description : details[info.kind];\r\n\r\n                        completionList.push(item);\r\n                    });\r\n\r\n                    resolve(new CompletionList(completionList, false));\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n        });\r\n    }\r\n}\r\n"]}