{"version":3,"file":"DefinitionProvider.js","sourceRoot":"","sources":["../../../src/frontend/DefinitionProvider.ts"],"names":[],"mappings":";;;AAKA,mCAEgB;AAGhB,MAAa,uBAAuB;IACL;IAA3B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,iBAAiB,CAAC,QAAsB,EAAE,QAAkB,EAC/D,MAAyB;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,GAAG,CAAC,EACnG,IAAI,CAAC,CAAC;YAEV,IAAI,CAAC,IAAI,EAAE;gBACP,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB;iBAAM;gBAKH,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,MAAM,KAAK,GAAG,IAAI,cAAK,CACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EACnC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAClC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EACjC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CACnC,CAAC;oBAEF,OAAO,CAAC,IAAI,iBAAQ,CAAC,YAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBAEH,OAAO,CAAC,IAAI,iBAAQ,CAAC,YAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,iBAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5D;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhCD,0DAgCC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport {\r\n    TextDocument, Position, CancellationToken, Range, Location, Uri, ProviderResult, DefinitionProvider,\r\n} from \"vscode\";\r\nimport { AntlrFacade } from \"../backend/facade\";\r\n\r\nexport class AntlrDefinitionProvider implements DefinitionProvider {\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public provideDefinition(document: TextDocument, position: Position,\r\n        _token: CancellationToken): ProviderResult<Location> {\r\n        return new Promise((resolve) => {\r\n            const info = this.backend.symbolInfoAtPosition(document.fileName, position.character, position.line + 1,\r\n                true);\r\n\r\n            if (!info) {\r\n                resolve(null);\r\n            } else {\r\n                // VS code shows the text for the range given here on holding ctrl/cmd, which is rather\r\n                // useless given that we show this info already in the hover provider. So, in order\r\n                // to limit the amount of text we only pass on the smallest range which is possible.\r\n                // Yet we need the correct start position to not break the goto-definition feature.\r\n                if (info.definition) {\r\n                    const range = new Range(\r\n                        info.definition.range.start.row - 1,\r\n                        info.definition.range.start.column,\r\n                        info.definition.range.end.row - 1,\r\n                        info.definition.range.end.column,\r\n                    );\r\n\r\n                    resolve(new Location(Uri.file(info.source), range));\r\n                } else {\r\n                    // Empty for built-in entities.\r\n                    resolve(new Location(Uri.parse(\"\"), new Position(0, 0)));\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}