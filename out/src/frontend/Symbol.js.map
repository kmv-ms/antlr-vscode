{"version":3,"file":"Symbol.js","sourceRoot":"","sources":["../../../src/frontend/Symbol.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as vscode from \"vscode\";\r\n\r\nimport { SymbolKind } from \"../backend/types\";\r\n\r\nconst symbolDescriptionMap = new Map<SymbolKind, string>([\r\n    [SymbolKind.Terminal, \"Terminal\"],\r\n    [SymbolKind.Keyword, \"Keyword\"],\r\n    [SymbolKind.TokenVocab, \"Token Vocabulary\"],\r\n    [SymbolKind.Import, \"Import\"],\r\n    [SymbolKind.BuiltInLexerToken, \"Built-in Lexer Token\"],\r\n    [SymbolKind.VirtualLexerToken, \"Virtual Lexer Token\"],\r\n    [SymbolKind.FragmentLexerToken, \"Fragment Lexer Token\"],\r\n    [SymbolKind.LexerRule, \"Lexer Rule\"],\r\n    [SymbolKind.BuiltInMode, \"Built-in Lexer Mode\"],\r\n    [SymbolKind.LexerMode, \"Lexer Mode\"],\r\n    [SymbolKind.BuiltInChannel, \"Built-in Token Channel\"],\r\n    [SymbolKind.TokenChannel, \"Token Channel\"],\r\n    [SymbolKind.ParserRule, \"Parser Rule\"],\r\n    [SymbolKind.Operator, \"Operator\"],\r\n    [SymbolKind.Option, \"Grammar Option\"],\r\n    [SymbolKind.TokenReference, \"Token (Lexer Rule) Reference\"],\r\n    [SymbolKind.RuleReference, \"Parser Rule Reference\"],\r\n    [SymbolKind.GlobalNamedAction, \"Global Named Action\"],\r\n    [SymbolKind.LocalNamedAction, \"Local Named Action\"],\r\n    [SymbolKind.LexerCommand, \"Lexer Command\"],\r\n    [SymbolKind.ExceptionAction, \"Exception Action Code\"],\r\n    [SymbolKind.FinallyAction, \"Finally Action Code\"],\r\n    [SymbolKind.ParserAction, \"Parser Action\"],\r\n    [SymbolKind.LexerAction, \"Lexer Action\"],\r\n    [SymbolKind.ParserPredicate, \"Parser Predicate\"],\r\n    [SymbolKind.LexerPredicate, \"Lexer Predicate\"],\r\n    [SymbolKind.Arguments, \"Native Arguments\"],\r\n]);\r\n\r\n/**\r\n * Provides a textual expression for a native symbol kind.\r\n *\r\n * @param kind The kind of symbol for which a description is needed.\r\n *\r\n * @returns The description.\r\n */\r\nexport const symbolDescriptionFromEnum = (kind: SymbolKind): string => {\r\n    return symbolDescriptionMap.get(kind) || \"Unknown\";\r\n};\r\n\r\nconst symbolCodeTypeMap = new Map<SymbolKind, vscode.SymbolKind>([\r\n    [SymbolKind.Terminal, vscode.SymbolKind.EnumMember],\r\n    [SymbolKind.Keyword, vscode.SymbolKind.Key],\r\n    [SymbolKind.TokenVocab, vscode.SymbolKind.Module],\r\n    [SymbolKind.Import, vscode.SymbolKind.Module],\r\n    [SymbolKind.BuiltInLexerToken, vscode.SymbolKind.Enum],\r\n    [SymbolKind.VirtualLexerToken, vscode.SymbolKind.Enum],\r\n    [SymbolKind.FragmentLexerToken, vscode.SymbolKind.Enum],\r\n    [SymbolKind.LexerRule, vscode.SymbolKind.Function],\r\n    [SymbolKind.BuiltInMode, vscode.SymbolKind.Variable],\r\n    [SymbolKind.LexerMode, vscode.SymbolKind.Variable],\r\n    [SymbolKind.BuiltInChannel, vscode.SymbolKind.Number],\r\n    [SymbolKind.TokenChannel, vscode.SymbolKind.Number],\r\n    [SymbolKind.ParserRule, vscode.SymbolKind.Function],\r\n    [SymbolKind.Operator, vscode.SymbolKind.Operator],\r\n    [SymbolKind.Option, vscode.SymbolKind.Object],\r\n    [SymbolKind.TokenReference, vscode.SymbolKind.Function],\r\n    [SymbolKind.RuleReference, vscode.SymbolKind.Function],\r\n    [SymbolKind.GlobalNamedAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.LocalNamedAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.LexerCommand, vscode.SymbolKind.Struct],\r\n    [SymbolKind.ExceptionAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.FinallyAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.ParserAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.LexerAction, vscode.SymbolKind.Struct],\r\n    [SymbolKind.ParserPredicate, vscode.SymbolKind.Event],\r\n    [SymbolKind.LexerPredicate, vscode.SymbolKind.Event],\r\n    [SymbolKind.Arguments, vscode.SymbolKind.TypeParameter],\r\n]);\r\n\r\n/**\r\n * Converts the native symbol kind to a vscode symbol kind.\r\n *\r\n * @param kind The kind of symbol for which the vscode kind is needed.\r\n *\r\n * @returns The vscode symbol kind for the given ANTLR4 kind.\r\n */\r\nexport const translateSymbolKind = (kind: SymbolKind): vscode.SymbolKind => {\r\n    return symbolCodeTypeMap.get(kind) || vscode.SymbolKind.Null;\r\n};\r\n\r\nconst symbolCompletionTypeMap = new Map<SymbolKind, vscode.CompletionItemKind>([\r\n    [SymbolKind.Terminal, vscode.CompletionItemKind.EnumMember],\r\n    [SymbolKind.Keyword, vscode.CompletionItemKind.Keyword],\r\n    [SymbolKind.TokenVocab, vscode.CompletionItemKind.Module],\r\n    [SymbolKind.Import, vscode.CompletionItemKind.Module],\r\n    [SymbolKind.BuiltInLexerToken, vscode.CompletionItemKind.Enum],\r\n    [SymbolKind.VirtualLexerToken, vscode.CompletionItemKind.Enum],\r\n    [SymbolKind.FragmentLexerToken, vscode.CompletionItemKind.Enum],\r\n    [SymbolKind.LexerRule, vscode.CompletionItemKind.Function],\r\n    [SymbolKind.BuiltInMode, vscode.CompletionItemKind.Variable],\r\n    [SymbolKind.LexerMode, vscode.CompletionItemKind.Variable],\r\n    [SymbolKind.BuiltInChannel, vscode.CompletionItemKind.Value],\r\n    [SymbolKind.TokenChannel, vscode.CompletionItemKind.Value],\r\n    [SymbolKind.ParserRule, vscode.CompletionItemKind.Function],\r\n    [SymbolKind.Operator, vscode.CompletionItemKind.Operator],\r\n    [SymbolKind.Option, vscode.CompletionItemKind.User],\r\n    [SymbolKind.TokenReference, vscode.CompletionItemKind.Function],\r\n    [SymbolKind.RuleReference, vscode.CompletionItemKind.Function],\r\n    [SymbolKind.GlobalNamedAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.LocalNamedAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.LexerCommand, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.ExceptionAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.FinallyAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.ParserAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.LexerAction, vscode.CompletionItemKind.Struct],\r\n    [SymbolKind.ParserPredicate, vscode.CompletionItemKind.Event],\r\n    [SymbolKind.LexerPredicate, vscode.CompletionItemKind.Event],\r\n    [SymbolKind.Arguments, vscode.CompletionItemKind.TypeParameter],\r\n]);\r\n\r\n\r\n/**\r\n * Converts the native symbol kind to a vscode completion item kind.\r\n *\r\n * @param kind The kind of symbol for which return the completion item kind.\r\n *\r\n * @returns The vscode completion item kind.\r\n */\r\nexport const translateCompletionKind = (kind: SymbolKind): vscode.CompletionItemKind => {\r\n    return symbolCompletionTypeMap.get(kind) || vscode.CompletionItemKind.Text;\r\n};\r\n"]}