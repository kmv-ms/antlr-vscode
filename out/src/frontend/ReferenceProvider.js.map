{"version":3,"file":"ReferenceProvider.js","sourceRoot":"","sources":["../../../src/frontend/ReferenceProvider.ts"],"names":[],"mappings":";;;AAKA,mCAGgB;AAIhB,MAAa,sBAAsB;IACJ;IAA3B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,iBAAiB,CAAC,QAAsB,EAAE,QAAkB,EAAE,QAA0B,EAC3F,MAAyB;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,GAAG,CAAC,EACnG,KAAK,CAAC,CAAC;YAEX,MAAM,MAAM,GAAe,EAAE,CAAC;YAC9B,IAAI,IAAI,EAAE;gBACN,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpF,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;oBAC9B,IAAI,MAAM,CAAC,UAAU,EAAE;wBACnB,MAAM,KAAK,GAAG,IAAI,cAAK,CACnB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EACrC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EACpC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EACnC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAC1D,CAAC;wBACF,MAAM,QAAQ,GAAG,IAAI,iBAAQ,CAAC,YAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;wBAC9D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACzB;iBACJ;gBAED,OAAO,CAAC,MAAM,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA7BD,wDA6BC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport {\r\n    TextDocument, Position, Location, CancellationToken, Range, Uri, ProviderResult, ReferenceProvider,\r\n    ReferenceContext,\r\n} from \"vscode\";\r\n\r\nimport { AntlrFacade } from \"../backend/facade\";\r\n\r\nexport class AntlrReferenceProvider implements ReferenceProvider {\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public provideReferences(document: TextDocument, position: Position, _context: ReferenceContext,\r\n        _token: CancellationToken): ProviderResult<Location[]> {\r\n        return new Promise((resolve) => {\r\n            const info = this.backend.symbolInfoAtPosition(document.fileName, position.character, position.line + 1,\r\n                false);\r\n\r\n            const result: Location[] = [];\r\n            if (info) {\r\n                const occurrences = this.backend.getSymbolOccurrences(document.fileName, info.name);\r\n                for (const symbol of occurrences) {\r\n                    if (symbol.definition) {\r\n                        const range = new Range(\r\n                            symbol.definition.range.start.row - 1,\r\n                            symbol.definition.range.start.column,\r\n                            symbol.definition.range.end.row - 1,\r\n                            symbol.definition.range.start.column + info.name.length,\r\n                        );\r\n                        const location = new Location(Uri.file(symbol.source), range);\r\n                        result.push(location);\r\n                    }\r\n                }\r\n\r\n                resolve(result);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}