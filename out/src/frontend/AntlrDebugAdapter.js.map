{"version":3,"file":"AntlrDebugAdapter.js","sourceRoot":"","sources":["../../../src/frontend/AntlrDebugAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n// Have to disable these rules here for the await-notify functionality.\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n\r\nimport {\r\n    DebugSession, InitializedEvent, Thread, Scope, Source, OutputEvent,\r\n    TerminatedEvent, StoppedEvent, Breakpoint, BreakpointEvent, StackFrame,\r\n} from \"@vscode/debugadapter\";\r\nimport { DebugProtocol } from \"@vscode/debugprotocol\";\r\n\r\nimport { window, Uri, WorkspaceFolder } from \"vscode\";\r\nimport * as fs from \"fs-extra\";\r\nimport * as path from \"path\";\r\nimport { Subject } from \"await-notify\";\r\n\r\nimport { GrammarDebugger, IGrammarBreakPoint } from \"../backend/GrammarDebugger\";\r\nimport { ParseTreeProvider } from \"./webviews/ParseTreeProvider\";\r\nimport { AntlrFacade } from \"../backend/facade\";\r\nimport { CommonToken } from \"antlr4ts\";\r\nimport { IParseTreeNode } from \"../backend/types\";\r\n\r\n/**\r\n * Interface that reflects the arguments as specified in package.json.\r\n */\r\nexport interface ILaunchRequestArguments extends DebugProtocol.LaunchRequestArguments {\r\n    input: string;\r\n    startRule: string;\r\n    grammar: string;\r\n    actionFile: string;\r\n    stopOnEntry?: boolean;\r\n    trace?: boolean;\r\n    printParseTree?: boolean;\r\n    visualParseTree?: boolean;\r\n}\r\n\r\nexport interface IDebuggerConsumer {\r\n    debugger: GrammarDebugger;\r\n\r\n    updateContent(uri: Uri): void;\r\n    debuggerStopped(uri: Uri): void; // Called after each stop of the debugger (step, pause, breakpoint).\r\n}\r\n\r\nenum VarRef {\r\n    Globals = 1000,\r\n    ParseTree = 1002,\r\n    Context = 2000,\r\n    Tokens = 3000,\r\n    SingleToken = 10000,\r\n}\r\n\r\nexport class AntlrDebugSession extends DebugSession {\r\n    private static threadId = 1;\r\n\r\n    private debugger: GrammarDebugger | undefined;\r\n    private parseTreeProvider?: ParseTreeProvider;\r\n    private configurationDone = new Subject();\r\n\r\n    private showTextualParseTree = false;\r\n    private showGraphicalParseTree = false;\r\n    private testInput = \"\";\r\n\r\n    // Some variables, which are updated between each scope/var request.\r\n    private tokens: CommonToken[] | undefined;\r\n    private variables: Array<[string, string]>;\r\n\r\n    /**\r\n     * Creates a new debug adapter that is used for one debug session.\r\n     * We configure the default implementation of a debug adapter here.\r\n     *\r\n     * @param folder The current workspace folder for resolving file paths.\r\n     * @param backend Our extension backend.\r\n     * @param consumers A list of consumers that need a notification on certain events during debug.\r\n     */\r\n    public constructor(\r\n        private folder: WorkspaceFolder | undefined,\r\n        private backend: AntlrFacade,\r\n        private consumers: IDebuggerConsumer[]) {\r\n        super();\r\n\r\n        this.setDebuggerLinesStartAt1(true);\r\n        this.setDebuggerColumnsStartAt1(false);\r\n\r\n        if (consumers[0] instanceof ParseTreeProvider) {\r\n            this.parseTreeProvider = consumers[0];\r\n        }\r\n    }\r\n\r\n    public override shutdown(): void {\r\n        // Nothing to do for now.\r\n    }\r\n\r\n    protected override initializeRequest(response: DebugProtocol.InitializeResponse,\r\n        _args: DebugProtocol.InitializeRequestArguments): void {\r\n\r\n        response.body = {\r\n            supportsConfigurationDoneRequest: true,\r\n            supportsStepInTargetsRequest: true,\r\n            supportsDelayedStackTraceLoading: false,\r\n        };\r\n\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override configurationDoneRequest(response: DebugProtocol.ConfigurationDoneResponse,\r\n        args: DebugProtocol.ConfigurationDoneArguments): void {\r\n\r\n        super.configurationDoneRequest(response, args);\r\n        this.configurationDone.notify();\r\n    }\r\n\r\n    protected override launchRequest(response: DebugProtocol.LaunchResponse, args: ILaunchRequestArguments): void {\r\n        if (!args.input) {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                format: \"Could not launch debug session: no test input file specified\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (!path.isAbsolute(args.input) && this.folder) {\r\n            args.input = path.join(this.folder.uri.fsPath, args.input);\r\n        }\r\n\r\n        if (!fs.existsSync(args.input)) {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                format: \"Could not launch debug session: test input file not found.\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (args.actionFile) {\r\n            if (!path.isAbsolute(args.actionFile) && this.folder) {\r\n                args.actionFile = path.join(this.folder.uri.fsPath, args.actionFile);\r\n            }\r\n\r\n            if (!fs.existsSync(args.actionFile)) {\r\n                void window.showInformationMessage(\r\n                    \"Cannot find file for semantic predicate evaluation. No evaluation will take place.\",\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!args.grammar) {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                // eslint-disable-next-line no-template-curly-in-string\r\n                format: \"Could not launch debug session: no grammar file specified (use the ${file} macro for the \" +\r\n                    \"current editor).\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (path.extname(args.grammar) !== \".g4\") {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                format: \"Could not launch debug session: \" + args.grammar + \" is not a grammar file\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (!path.isAbsolute(args.grammar) && this.folder) {\r\n            args.grammar = path.join(this.folder.uri.fsPath, args.grammar);\r\n        }\r\n\r\n        if (!fs.existsSync(args.grammar)) {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                format: \"Could not launch debug session: cannot find grammar file.\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.backend.hasErrors(args.grammar)) {\r\n            this.sendErrorResponse(response, {\r\n                id: 1,\r\n                format: \"Could not launch debug session: the grammar contains issues.\",\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.setup(args.grammar, args.actionFile);\r\n            for (const consumer of this.consumers) {\r\n                consumer.debugger = this.debugger!;\r\n                consumer.updateContent(Uri.file(args.grammar));\r\n            }\r\n            this.sendEvent(new InitializedEvent()); // Now we can accept breakpoints.\r\n        } catch (e) {\r\n            this.sendErrorResponse(response, { id: 1, format: \"Could not prepare debug session:\\n\\n\" + String(e) });\r\n\r\n            return;\r\n        }\r\n\r\n        // Need to wait here for the configuration to be done, which happens after break points are set.\r\n        // This in turn is triggered by sending the InitializedEvent above.\r\n        this.configurationDone.wait(1000).then(() => {\r\n            this.showTextualParseTree = args.printParseTree || false;\r\n            this.showGraphicalParseTree = args.visualParseTree || false;\r\n            this.testInput = args.input;\r\n\r\n            try {\r\n                const testInput = fs.readFileSync(args.input, { encoding: \"utf8\" });\r\n\r\n                const startRuleIndex = args.startRule ? this.debugger!.ruleIndexFromName(args.startRule) : 0;\r\n\r\n                if (startRuleIndex < 0) {\r\n                    this.sendErrorResponse(response, {\r\n                        id: 2,\r\n                        format: \"Error while launching debug session: start rule \\\"\" + args.startRule + \"\\\" not found\",\r\n                    });\r\n\r\n                    return;\r\n                }\r\n\r\n                this.debugger!.start(startRuleIndex, testInput, args.noDebug ? true : false);\r\n            } catch (e) {\r\n                this.sendErrorResponse(response, { id: 3, format: \"Could not launch debug session:\\n\\n\" + String(e) });\r\n\r\n                return;\r\n            }\r\n\r\n            this.sendResponse(response);\r\n        });\r\n    }\r\n\r\n    protected override setBreakPointsRequest(response: DebugProtocol.SetBreakpointsResponse,\r\n        args: DebugProtocol.SetBreakpointsArguments): void {\r\n        this.debugger!.clearBreakPoints();\r\n        if (args.breakpoints && args.source.path) {\r\n            const actualBreakpoints = args.breakpoints.map((sourceBreakPoint) => {\r\n                const { validated, line, id } = this.debugger!.addBreakPoint(args.source.path!,\r\n                    this.convertDebuggerLineToClient(sourceBreakPoint.line));\r\n                const targetBreakPoint = <DebugProtocol.Breakpoint>new Breakpoint(validated,\r\n                    this.convertClientLineToDebugger(line));\r\n                targetBreakPoint.id = id;\r\n\r\n                return targetBreakPoint;\r\n            });\r\n\r\n            response.body = {\r\n                breakpoints: actualBreakpoints,\r\n            };\r\n        }\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override threadsRequest(response: DebugProtocol.ThreadsResponse): void {\r\n        // We have no threads, so return a dummy entry.\r\n        response.body = {\r\n            threads: [\r\n                new Thread(AntlrDebugSession.threadId, \"Interpreter\"),\r\n            ],\r\n        };\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override stackTraceRequest(response: DebugProtocol.StackTraceResponse,\r\n        args: DebugProtocol.StackTraceArguments): void {\r\n\r\n        if (!this.debugger) {\r\n            response.body = {\r\n                stackFrames: [],\r\n                totalFrames: 0,\r\n            };\r\n            this.sendResponse(response);\r\n\r\n            return;\r\n        }\r\n\r\n        const startFrame = typeof args.startFrame === \"number\" ? args.startFrame : 0;\r\n        const maxLevels = typeof args.levels === \"number\" ? args.levels : 1000;\r\n\r\n        const stack = this.debugger.currentStackTrace;\r\n        const frames: StackFrame[] = [];\r\n        for (let i = startFrame; i < stack.length; ++i) {\r\n            const entry = stack[i];\r\n            let frame: StackFrame;\r\n            if (entry.next.length > 0) {\r\n                frame = new StackFrame(i, entry.name,\r\n                    this.createSource(entry.source),\r\n                    this.convertDebuggerLineToClient(entry.next[0].start.row),\r\n                    this.convertDebuggerColumnToClient(entry.next[0].start.column),\r\n                );\r\n\r\n                frame.presentationHint = \"normal\";\r\n            } else {\r\n                // We arrive here usually because an internal problem came up.\r\n                // See if we can use the same line/column coordinates as the previous frame.\r\n                let line = this.convertDebuggerLineToClient(1);\r\n                let column = this.convertDebuggerColumnToClient(0);\r\n                if (frames.length > 0) {\r\n                    line = frames[frames.length - 1].line;\r\n                    column = frames[frames.length - 1].column;\r\n                }\r\n\r\n                frame = new StackFrame(i, entry.name + \" <missing next>\",\r\n                    this.createSource(entry.source),\r\n                    line,\r\n                    column,\r\n                );\r\n\r\n                frame.presentationHint = \"label\";\r\n            }\r\n            frames.push(frame);\r\n\r\n            if (frames.length > maxLevels) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        response.body = {\r\n            stackFrames: frames,\r\n            totalFrames: stack.length,\r\n        };\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override scopesRequest(response: DebugProtocol.ScopesResponse,\r\n        args: DebugProtocol.ScopesArguments): void {\r\n        // Cache a few values that stay the same during a single request for scopes and variables.\r\n        if (this.debugger) {\r\n            this.tokens = this.debugger.tokenList;\r\n            this.debugger.getVariables(args.frameId).then((values) => {\r\n                this.variables = values;\r\n                const scopes: Scope[] = [];\r\n                scopes.push(new Scope(\"Globals\", VarRef.Globals, true));\r\n                //scopes.push(new Scope(this.debugger.getStackInfo(args.frameId), VarRef.Context, false));\r\n                response.body = {\r\n                    scopes,\r\n                };\r\n                this.sendResponse(response);\r\n            }).catch(() => {\r\n                this.sendResponse(response);\r\n            });\r\n        }\r\n    }\r\n\r\n    protected override variablesRequest(response: DebugProtocol.VariablesResponse,\r\n        args: DebugProtocol.VariablesArguments): void {\r\n        const variables: DebugProtocol.Variable[] = [];\r\n\r\n        switch (args.variablesReference) {\r\n            case VarRef.Globals: {\r\n                if (this.tokens && this.debugger) {\r\n                    variables.push({\r\n                        name: \"Test Input\",\r\n                        type: \"string\",\r\n                        value: this.testInput,\r\n                        variablesReference: 0,\r\n                    });\r\n                    variables.push({\r\n                        name: \"Input Size\",\r\n                        type: \"number\",\r\n                        value: this.debugger.inputSize.toString(),\r\n                        variablesReference: 0,\r\n                    });\r\n                    variables.push({\r\n                        name: \"Error Count\",\r\n                        type: \"number\",\r\n                        value: this.debugger.errorCount.toString(),\r\n                        variablesReference: 0,\r\n                    });\r\n                    variables.push({\r\n                        name: \"Input Tokens\",\r\n                        value: (this.tokens.length - this.debugger.currentTokenIndex).toString(),\r\n                        variablesReference: VarRef.Tokens,\r\n                        indexedVariables: this.tokens.length - this.debugger.currentTokenIndex,\r\n                    });\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            case VarRef.Context: { // Context related\r\n                break;\r\n            }\r\n\r\n            case VarRef.Tokens: {\r\n                if (this.tokens) {\r\n                    const start = this.debugger!.currentTokenIndex + (args.start ? args.start : 0);\r\n                    const length = args.count ? args.count : this.tokens.length;\r\n                    for (let i = 0; i < length; ++i) {\r\n                        const index = start + i;\r\n                        variables.push({\r\n                            name: `${index}: ${this.debugger!.tokenTypeName(this.tokens[index])}`,\r\n                            type: \"Token\",\r\n                            value: \"\",\r\n                            variablesReference: VarRef.Tokens + index,\r\n                            presentationHint: { kind: \"class\", attributes: [\"readonly\"] },\r\n                        });\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                if (args.variablesReference >= VarRef.Tokens && this.tokens) {\r\n                    const tokenIndex = args.variablesReference % VarRef.Tokens;\r\n                    if (tokenIndex >= 0 && tokenIndex < this.tokens.length) {\r\n                        const token = this.tokens[tokenIndex];\r\n                        variables.push({\r\n                            name: \"text\",\r\n                            type: \"string\",\r\n                            value: token.text ?? \"\",\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"type\",\r\n                            type: \"number\",\r\n                            value: String(token.type),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"line\",\r\n                            type: \"number\",\r\n                            value: String(token.line),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"offset\",\r\n                            type: \"number\",\r\n                            value: String(token.charPositionInLine),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"channel\",\r\n                            type: \"number\",\r\n                            value: String(token.channel),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"tokenIndex\",\r\n                            type: \"number\",\r\n                            value: String(token.tokenIndex),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"startIndex\",\r\n                            type: \"number\",\r\n                            value: String(token.startIndex),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                        variables.push({\r\n                            name: \"stopIndex\",\r\n                            type: \"number\",\r\n                            value: String(token.stopIndex),\r\n                            variablesReference: 0,\r\n                        });\r\n\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        response.body = {\r\n            variables,\r\n        };\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override pauseRequest(response: DebugProtocol.PauseResponse, _args: DebugProtocol.PauseArguments): void {\r\n        this.debugger?.pause();\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override continueRequest(response: DebugProtocol.ContinueResponse): void {\r\n        this.debugger?.continue();\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    protected override nextRequest(response: DebugProtocol.NextResponse): void {\r\n        this.debugger?.stepOver();\r\n        this.sendResponse(response);\r\n\r\n    }\r\n\r\n    protected override stepInRequest(response: DebugProtocol.StepInResponse): void {\r\n        this.debugger?.stepIn();\r\n        this.sendResponse(response);\r\n\r\n    }\r\n\r\n    protected override stepOutRequest(response: DebugProtocol.StepOutResponse): void {\r\n        this.debugger?.stepOut();\r\n        this.sendResponse(response);\r\n\r\n    }\r\n\r\n    protected override evaluateRequest(response: DebugProtocol.EvaluateResponse): void {\r\n        response.body = {\r\n            result: \"evaluation not supported\",\r\n            variablesReference: 0,\r\n        };\r\n        this.sendResponse(response);\r\n    }\r\n\r\n    private setup(grammar: string, actionFile: string) {\r\n        const basePath = path.dirname(grammar);\r\n        this.debugger = this.backend.createDebugger(grammar, actionFile, path.join(basePath, \".antlr\"));\r\n        if (!this.debugger) {\r\n            throw Error(\"Debugger creation failed. There are grammar errors.\");\r\n        }\r\n\r\n        if (!this.debugger.isValid) {\r\n            throw Error(\"Debugger creation failed. You are either trying to debug an unsupported file type or \" +\r\n                \"no interpreter data has been generated yet for the given grammar.\");\r\n        }\r\n\r\n        this.debugger.on(\"stopOnStep\", () => {\r\n            this.notifyConsumers(Uri.file(grammar));\r\n            this.sendEvent(new StoppedEvent(\"step\", AntlrDebugSession.threadId));\r\n        });\r\n\r\n        this.debugger.on(\"stopOnPause\", () => {\r\n            this.notifyConsumers(Uri.file(grammar));\r\n            this.sendEvent(new StoppedEvent(\"pause\", AntlrDebugSession.threadId));\r\n        });\r\n\r\n        this.debugger.on(\"stopOnBreakpoint\", () => {\r\n            this.notifyConsumers(Uri.file(grammar));\r\n            this.sendEvent(new StoppedEvent(\"breakpoint\", AntlrDebugSession.threadId));\r\n        });\r\n\r\n        this.debugger.on(\"stopOnException\", () => {\r\n            this.notifyConsumers(Uri.file(grammar));\r\n            this.sendEvent(new StoppedEvent(\"exception\", AntlrDebugSession.threadId));\r\n        });\r\n\r\n        this.debugger.on(\"breakpointValidated\", (bp: IGrammarBreakPoint) => {\r\n            const breakpoint: DebugProtocol.Breakpoint = {\r\n                verified: bp.validated,\r\n                id: bp.id,\r\n            };\r\n            this.sendEvent(new BreakpointEvent(\"changed\", breakpoint));\r\n        });\r\n\r\n        this.debugger.on(\"output\", (...args: unknown[]) => {\r\n            const isError = args[4] as boolean;\r\n            const column = args[3] as number;\r\n            const line = args[2] as number;\r\n            const filePath = args[1] as string;\r\n            const text = args[0] as string;\r\n\r\n            const e: DebugProtocol.OutputEvent = new OutputEvent(`${text}\\n`);\r\n            e.body.source = filePath ? this.createSource(filePath) : undefined;\r\n            e.body.line = line;\r\n            e.body.column = column;\r\n            e.body.category = isError ? \"stderr\" : \"stdout\";\r\n            this.sendEvent(e);\r\n        });\r\n\r\n        this.debugger.on(\"end\", () => {\r\n            this.notifyConsumers(Uri.file(grammar));\r\n            if (this.showTextualParseTree) {\r\n                let text = \"\";\r\n                if (!this.tokens) {\r\n                    this.tokens = this.debugger?.tokenList;\r\n                }\r\n\r\n                const recognizer = this.debugger?.recognizer;\r\n                this.tokens?.forEach((token) => {\r\n                    text += token.toString(recognizer) + \"\\n\";\r\n                });\r\n                this.sendEvent(new OutputEvent(\"Tokens:\\n\" + text + \"\\n\"));\r\n\r\n                const tree = this.debugger?.currentParseTree;\r\n                if (tree) {\r\n                    const treeText = this.parseNodeToString(tree);\r\n                    this.sendEvent(new OutputEvent(\"Parse Tree:\\n\" + treeText + \"\\n\"));\r\n                } else {\r\n                    this.sendEvent(new OutputEvent(\"No Parse Tree\\n\"));\r\n                }\r\n            }\r\n\r\n            if (this.showGraphicalParseTree) {\r\n                this.parseTreeProvider?.showWebview(Uri.file(grammar), {\r\n                    title: \"Parse Tree: \" + path.basename(grammar),\r\n                });\r\n            }\r\n\r\n            this.sendEvent(new TerminatedEvent());\r\n        });\r\n\r\n        this.debugger.on(\"error\", (reason: string) => {\r\n            const e: DebugProtocol.OutputEvent = new OutputEvent(`${reason}\\n`);\r\n            e.body.category = \"stderr\";\r\n            this.sendEvent(e);\r\n        });\r\n    }\r\n\r\n    //---- helpers\r\n\r\n    private createSource(filePath: string): Source {\r\n        return new Source(path.basename(filePath),\r\n            this.convertDebuggerPathToClient(filePath), undefined, undefined, \"antlr-data\");\r\n    }\r\n\r\n    private parseNodeToString(node: IParseTreeNode, level = 0): string {\r\n        let result = \" \".repeat(level);\r\n        switch (node.type) {\r\n            case \"rule\": {\r\n                const name = this.debugger!.ruleNameFromIndex(node.ruleIndex!);\r\n                result += name ? name : \"<unknown rule>\";\r\n\r\n                if (node.children.length > 0) {\r\n                    result += \" (\\n\";\r\n                    for (const child of node.children) {\r\n                        result += this.parseNodeToString(child, level + 1);\r\n                    }\r\n                    result += \" \".repeat(level) + \")\\n\";\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"error\": {\r\n                result += \" <Error>\";\r\n                if (node.symbol) {\r\n                    result += \"\\\"\" + node.symbol.text + \"\\\"\\n\";\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"terminal\": {\r\n                result += \"\\\"\" + node.symbol!.text + \"\\\"\\n\";\r\n                break;\r\n            }\r\n\r\n            default:\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private notifyConsumers(uri: Uri) {\r\n        for (const consumer of this.consumers) {\r\n            consumer.debuggerStopped(uri);\r\n        }\r\n    }\r\n\r\n    private escapeText(input: string): string {\r\n        let result = \"\";\r\n        for (const c of input) {\r\n            switch (c) {\r\n                case \"\\n\": {\r\n                    result += \"\\\\n\";\r\n                    break;\r\n                }\r\n\r\n                case \"\\r\": {\r\n                    result += \"\\\\r\";\r\n                    break;\r\n                }\r\n\r\n                case \"\\t\": {\r\n                    result += \"\\\\t\";\r\n                    break;\r\n                }\r\n\r\n                default: {\r\n                    result += c;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}