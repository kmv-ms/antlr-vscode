{"version":3,"file":"ParseTreeProvider.js","sourceRoot":"","sources":["../../../../src/frontend/webviews/ParseTreeProvider.ts"],"names":[],"mappings":";;;AAKA,+BAAgC;AAEhC,mCAAiD;AAEjD,uDAAyE;AACzE,oDAAiD;AAIjD,MAAa,iBAAkB,SAAQ,iCAAe;IAE3C,QAAQ,CAAkB;IAE1B,eAAe,CAAC,GAAQ;QAC3B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEe,eAAe,CAAC,OAAgB,EAAE,GAAQ,EAAE,QAA6B;QACrF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAE7C,MAAM,kBAAkB,GAAG,6BAAa,CAAC,UAAU,CAAC,0CAA0C,EAAE,IAAI,CAAC,OAAO,EACxG,OAAO,CAAC,CAAC;QACb,MAAM,gBAAgB,GAAG,6BAAa,CAAC,UAAU,CAAC,oCAAoC,EAAE,IAAI,CAAC,OAAO,EAChG,OAAO,CAAC,CAAC;QACb,MAAM,YAAY,GAAG,6BAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9F,MAAM,QAAQ,GAAG,kBAAS,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAU,2BAA2B,EAAE,IAAI,CAAC,CAAC;QAC5E,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC;QAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAEnC,MAAM,OAAO,GAAG;;;;sBAIF,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,KAAK,CAAC;sBAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;;qCAER,KAAK,UAAU,YAAY;qCAC3B,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6EAsCmC,IAAA,eAAQ,EAAC,GAAG,CAAC,MAAM,CAAC;;;;;;;iCAOhE,KAAK;yDACmB,kBAAkB;mDACxB,gBAAgB;;;;;;;;;;;;;;;;;;;yCAmB1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;sCACxB,SAAS,CAAC,QAAQ,EAAE;sCACpB,UAAU,CAAC,QAAQ,EAAE;;;;6CAId,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;6CACtB,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;;;;;gBAKlD,CAAC;QAET,OAAO,OAAO,CAAC;IACnB,CAAC;IAEe,aAAa,CAAC,GAAQ;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YAClB,OAAO,EAAE,qBAAqB;YAC9B,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA1HD,8CA0HC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { basename } from \"path\";\r\n\r\nimport { Uri, Webview, workspace } from \"vscode\";\r\n\r\nimport { WebviewProvider, IWebviewShowOptions } from \"./WebviewProvider\";\r\nimport { FrontendUtils } from \"../FrontendUtils\";\r\nimport { IDebuggerConsumer } from \"../AntlrDebugAdapter\";\r\nimport { GrammarDebugger } from \"../../backend/GrammarDebugger\";\r\n\r\nexport class ParseTreeProvider extends WebviewProvider implements IDebuggerConsumer {\r\n\r\n    public debugger: GrammarDebugger;\r\n\r\n    public debuggerStopped(uri: Uri): void {\r\n        this.updateContent(uri);\r\n    }\r\n\r\n    public override generateContent(webview: Webview, uri: Uri, _options: IWebviewShowOptions): string {\r\n        const graph = this.debugger.currentParseTree;\r\n\r\n        const rendererScriptPath = FrontendUtils.getOutPath(\"src/webview-scripts/ParseTreeRenderer.js\", this.context,\r\n            webview);\r\n        const exportScriptPath = FrontendUtils.getOutPath(\"src/webview-scripts/GraphExport.js\", this.context,\r\n            webview);\r\n        const graphLibPath = FrontendUtils.getNodeModulesPath(webview, \"d3/dist/d3.js\", this.context);\r\n\r\n        const settings = workspace.getConfiguration(\"antlr4.debug\");\r\n        const horizontal = settings.get<boolean>(\"visualParseTreeHorizontal\", true);\r\n        const clustered = settings.get<boolean>(\"visualParseTreeClustered\", false);\r\n        const nonce = this.generateNonce();\r\n\r\n        const diagram = `<!DOCTYPE html>\r\n            <html>\r\n                <head>\r\n                    <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\r\n                    ${this.generateContentSecurityPolicy(webview, nonce)}\r\n                    ${this.getStyles(webview)}\r\n                    <base target=\"_blank\">\r\n                    <script nonce=\"${nonce}\" src=\"${graphLibPath}\"></script>\r\n                    <script nonce=\"${nonce}\">\r\n                        let parseTreeRenderer;\r\n                        let graphExport;\r\n                    </script>\r\n                </head>\r\n\r\n            <body>\r\n                <div class=\"header\"><span class=\"parse-tree-color\"><span class=\"graph-initial\">â“…</span>arse Tree</span>\r\n                    <span class=\"action-box\">\r\n                        Tree\r\n                        <span class=\"switch\">\r\n                            <span class=\"switch-border\">\r\n                                <input id=\"switch1\" type=\"checkbox\" onClick=\"parseTreeRenderer.toggleTreeType(this)\"/>\r\n                                <label for=\"switch1\"></label>\r\n                                <span class=\"switch-handle-top\"></span>\r\n                            </span>\r\n                        </span>\r\n                        Cluster&nbsp;&nbsp;\r\n                        Horizontal\r\n                        <span class=\"switch\">\r\n                            <span class=\"switch-border\">\r\n                                <input id=\"switch2\" type=\"checkbox\"\r\n                                    onClick=\"parseTreeRenderer.toggleOrientation(this)\"/>\r\n                                <label for=\"switch2\"></label>\r\n                                <span class=\"switch-handle-top\"></span>\r\n                            </span>\r\n                        </span>\r\n                        Vertical&nbsp;&nbsp;\r\n                        <a onClick=\"parseTreeRenderer.changeNodeSize(0.9);\">\r\n                            <span class=\"parse-tree-color\" style=\"font-size: 120%; font-weight: 800;\r\n                                cursor: pointer; vertical-align: middle;\">-</span>\r\n                        </a>\r\n                        Node Size\r\n                        <a onClick=\"parseTreeRenderer.changeNodeSize(1.1);\">\r\n                            <span class=\"parse-tree-color\" style=\"font-size: 120%; font-weight: 800; cursor: pointer;\r\n                                vertical-align: middle;\">+</span>\r\n                        </a>&nbsp;&nbsp;\r\n                        Save to SVG\r\n                        <a onClick=\"graphExport.exportToSVG('parse-tree', '${basename(uri.fsPath)}');\">\r\n                            <span class=\"parse-tree-save-image\" />\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n\r\n                <svg></svg>\r\n                <script nonce=\"${nonce}\" type=\"module\">\r\n                    import { ParseTreeRenderer } from \"${rendererScriptPath}\";\r\n                    import { GraphExport } from \"${exportScriptPath}\";\r\n\r\n                    // Register a listener for data changes.\r\n                    window.addEventListener(\"message\", (event) => {\r\n                        switch (event.data.command) {\r\n                            case \"updateParseTreeData\": {\r\n                                parseTreeRenderer.loadNewTree({ parseTreeData: event.data.treeData });\r\n\r\n                                break;\r\n                            }\r\n\r\n                            default:\r\n                        }\r\n                    });\r\n\r\n                    parseTreeRenderer = new ParseTreeRenderer();\r\n                    graphExport = new GraphExport();\r\n\r\n                    parseTreeRenderer.loadNewTree({\r\n                        parseTreeData: ${JSON.stringify(graph)},\r\n                        useCluster: ${clustered.toString()},\r\n                        horizontal: ${horizontal.toString()},\r\n                        width: 1000,\r\n                        height: 1000,\r\n                        initialScale: 0.75,\r\n                        initialTranslateX: ${horizontal ? 200 : 500},\r\n                        initialTranslateY: ${horizontal ? 400 : 50},\r\n                    });\r\n                    parseTreeRenderer.initSwitches();\r\n                </script>\r\n            </body>\r\n        </html>`;\r\n\r\n        return diagram;\r\n    }\r\n\r\n    public override updateContent(uri: Uri): boolean {\r\n        const graph = this.debugger.currentParseTree;\r\n        this.sendMessage(uri, {\r\n            command: \"updateParseTreeData\",\r\n            treeData: graph,\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n"]}