{"version":3,"file":"RailroadDiagramProvider.js","sourceRoot":"","sources":["../../../../src/frontend/webviews/RailroadDiagramProvider.ts"],"names":[],"mappings":";;;AAKA,+BAAyC;AAIzC,+CAAiD;AACjD,uDAAyE;AACzE,oDAAiD;AAEjD,MAAa,uBAAwB,SAAQ,iCAAe;IAExC,eAAe,CAAC,OAAgB,EAAE,GAAQ,EAAE,OAA4B;QACpF,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAA,eAAQ,EAAC,QAAQ,EAAE,IAAA,cAAO,EAAC,QAAQ,CAAC,CAAC,CAAC;QAEvD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACnC,MAAM,OAAO,GAAG;YACZ,6BAAa,CAAC,WAAW,CAAC,sBAAsB,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;SAC3E,CAAC;QACF,MAAM,gBAAgB,GAAG,6BAAa,CAAC,UAAU,CAAC,oCAAoC,EAAE,IAAI,CAAC,OAAO,EAChG,OAAO,CAAC,CAAC;QAEb,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YAC1D,OAAO;;;0BAGO,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,KAAK,CAAC;;;wBAGpD,CAAC;SAChB;QAED,IAAI,OAAO,GAAG;;;;kBAIJ,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,KAAK,CAAC;kBAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;8BACX,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;iCACf,KAAK;;;;;;cAMxB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;QAExC,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,IAAI;;;;mFAI4D,QAAQ;;;;;qCAKtD,CAAC;YAE1B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAClE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,MAAM,CAAC,IAAI,KAAK,kBAAU,CAAC,SAAS;uBACjC,MAAM,CAAC,IAAI,KAAK,kBAAU,CAAC,UAAU;uBACrC,MAAM,CAAC,IAAI,KAAK,kBAAU,CAAC,kBAAkB,EAAE;oBAClD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;oBAChE,OAAO,IAAI,cAAc,MAAM,CAAC,IAAI,WAAW,MAAM,CAAC,IAAI;yCACrC,KAAK,KAAK,MAAM,WAAW,CAAC;iBACpD;aACJ;YACD,OAAO,IAAI,QAAQ,CAAC;SACvB;aAAM;YACH,OAAO,IAAI;;;;;sCAKe,IAAI,CAAC,WAAW,0CAA0C,IAAI,CAAC,gBAAgB;;;;sEAI/C,IAAI,CAAC,WAAW;;;;;;qCAMjD,KAAK,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC;uBAC9E,CAAC;SACf;QAED,OAAO,IAAI;6BACU,KAAK;+CACa,gBAAgB;;;;uBAIxC,CAAC;QAEhB,OAAO,OAAO,CAAC;IACnB,CAAC;IAWe,MAAM,CAAC,MAAkB,EAAE,MAAM,GAAG,KAAK;QAGrD,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;QACtC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAE/G,IAAI,CAAC,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YAC9B,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAErB,OAAO;SACV;QAED,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK,IAAI,MAAM,EAAE;YACxE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAE9B,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACxB;IACL,CAAC;CACJ;AAxHD,0DAwHC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { basename, extname } from \"path\";\r\n\r\nimport { TextEditor, Uri, Webview } from \"vscode\";\r\n\r\nimport { SymbolKind } from \"../../backend/types\";\r\nimport { WebviewProvider, IWebviewShowOptions } from \"./WebviewProvider\";\r\nimport { FrontendUtils } from \"../FrontendUtils\";\r\n\r\nexport class RailroadDiagramProvider extends WebviewProvider {\r\n\r\n    public override generateContent(webview: Webview, uri: Uri, options: IWebviewShowOptions): string {\r\n        const fileName = uri.fsPath;\r\n        const baseName = basename(fileName, extname(fileName));\r\n\r\n        const nonce = this.generateNonce();\r\n        const scripts = [\r\n            FrontendUtils.getMiscPath(\"railroad-diagrams.js\", this.context, webview),\r\n        ];\r\n        const exportScriptPath = FrontendUtils.getOutPath(\"src/webview-scripts/GraphExport.js\", this.context,\r\n            webview);\r\n\r\n        if (!this.currentRule || this.currentRuleIndex === undefined) {\r\n            return `<!DOCTYPE html>\r\n                <html>\r\n                    <head>\r\n                        ${this.generateContentSecurityPolicy(webview, nonce)}\r\n                    </head>\r\n                    <body><span style=\"color: #808080; font-size: 16pt;\">No rule selected</span></body>\r\n                </html>`;\r\n        }\r\n\r\n        let diagram = `<!DOCTYPE html>\r\n            <html>\r\n            <head>\r\n                <meta http-equiv=\"Content-type\" content=\"text/html; charset=UTF-8\"/>\r\n                ${this.generateContentSecurityPolicy(webview, nonce)}\r\n                ${this.getStyles(webview)}\r\n                <base href=\"${uri.toString(true)}\">\r\n                <script nonce=\"${nonce}\">\r\n                    let graphExport;\r\n                </script>\r\n            </head>\r\n\r\n            <body>\r\n            ${this.getScripts(nonce, scripts)}`;\r\n\r\n        if (options.fullList) {\r\n            diagram += `\r\n                <div class=\"header\">\r\n                    <span class=\"rrd-color\"><span class=\"graph-initial\">Ⓡ</span>rd&nbsp;&nbsp;</span>All rules\r\n                    <span class=\"action-box\">\r\n                        Save to HTML<a onClick=\"graphExport.exportToHTML('rrd', '${baseName}');\">\r\n                            <span class=\"rrd-save-image\" />\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n                <div id=\"container\">`;\r\n\r\n            const symbols = this.backend.listTopLevelSymbols(fileName, false);\r\n            for (const symbol of symbols) {\r\n                if (symbol.kind === SymbolKind.LexerRule\r\n                    || symbol.kind === SymbolKind.ParserRule\r\n                    || symbol.kind === SymbolKind.FragmentLexerToken) {\r\n                    const script = this.backend.getRRDScript(fileName, symbol.name);\r\n                    diagram += `<h3 class=\"${symbol.name}-class\">${symbol.name}</h3>\r\n                        <script nonce=\"${nonce}\">${script}</script>`;\r\n                }\r\n            }\r\n            diagram += \"</div>\";\r\n        } else {\r\n            diagram += `\r\n                <div class=\"header\">\r\n                    <span class=\"rrd-color\">\r\n                        <span class=\"graph-initial\">Ⓡ</span>ule&nbsp;&nbsp;\r\n                    </span>\r\n                        &nbsp;&nbsp;${this.currentRule} <span class=\"rule-index\">(rule index: ${this.currentRuleIndex})\r\n                    </span>\r\n                    <span class=\"action-box\">\r\n                        Save to SVG\r\n                        <a onClick=\"graphExport.exportToSVG('rrd', '${this.currentRule}');\">\r\n                            <span class=\"rrd-save-image\" />\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n                <div id=\"container\">\r\n                    <script nonce=\"${nonce}\" >${this.backend.getRRDScript(fileName, this.currentRule)}</script>\r\n                </div>`;\r\n        }\r\n\r\n        diagram += `\r\n            <script nonce=\"${nonce}\" type=\"module\">\r\n                import { GraphExport } from \"${exportScriptPath}\";\r\n\r\n                graphExport = new GraphExport();\r\n            </script>\r\n        </body></html>`;\r\n\r\n        return diagram;\r\n    }\r\n\r\n    /**\r\n     * Called when the webview must be updated. This can happen when:\r\n     * - The user switched to another editor, which holds an ANTLR4 grammar.\r\n     * - The user moved the caret in an editor holding a grammar.\r\n     * - New data was generated for the grammar in that editor.\r\n     *\r\n     * @param editor The editor that holds a grammar.\r\n     * @param forced If true update regardless of the selected rule (e.g. when new ATN data was generated).\r\n     */\r\n    public override update(editor: TextEditor, forced = false): void {\r\n        // Keep track of the currently selected rule in the given editor and trigger a visual update\r\n        // if the ATN graph is currently visible.\r\n        const caret = editor.selection.active;\r\n        const [rule, index] = this.backend.ruleFromPosition(editor.document.fileName, caret.character, caret.line + 1);\r\n\r\n        if (!rule || index === undefined) {\r\n            super.update(editor);\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.currentRule !== rule || this.currentRuleIndex !== index || forced) {\r\n            this.currentRule = rule;\r\n            this.currentRuleIndex = index;\r\n\r\n            super.update(editor);\r\n        }\r\n    }\r\n}\r\n"]}