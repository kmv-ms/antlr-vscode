{"version":3,"file":"CallGraphProvider.js","sourceRoot":"","sources":["../../../../src/frontend/webviews/CallGraphProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,2CAA6B;AAG7B,uDAAoD;AACpD,oDAAiD;AAGjD,MAAa,iBAAkB,SAAQ,iCAAe;IAElC,eAAe,CAAC,OAAgB,EAAE,GAAQ;QACtD,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEjE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACvD,MAAM,IAAI,GAAsB,EAAE,CAAC;QACnC,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;YACvB,MAAM,UAAU,GAAa,EAAE,CAAC;YAChC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC9B,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxB;YAED,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;gBAC/B,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxB;YAED,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;SAC7C;QAED,MAAM,kBAAkB,GAAG,6BAAa,CAAC,UAAU,CAAC,0CAA0C,EAAE,IAAI,CAAC,OAAO,EACxG,OAAO,CAAC,CAAC;QACb,MAAM,gBAAgB,GAAG,6BAAa,CAAC,UAAU,CAAC,oCAAoC,EAAE,IAAI,CAAC,OAAO,EAChG,OAAO,CAAC,CAAC;QACb,MAAM,YAAY,GAAG,6BAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9F,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAEnC,MAAM,OAAO,GAAG;;;;sBAIF,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,KAAK,CAAC;sBAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;kCACX,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;qCACf,KAAK,UAAU,YAAY;qCAC3B,KAAK;;;;;;;;;;;;;;;;;;;6EAmBmC,QAAQ;;;;;;;;;iCASpD,KAAK;yDACmB,kBAAkB;mDACxB,gBAAgB;;mCAEhC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;;;;;;;;gBAQvC,CAAC;QAET,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AAhFD,8CAgFC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as path from \"path\";\r\nimport { Uri, Webview } from \"vscode\";\r\n\r\nimport { WebviewProvider } from \"./WebviewProvider\";\r\nimport { FrontendUtils } from \"../FrontendUtils\";\r\nimport { ICallGraphEntry } from \"../../webview-scripts/types\";\r\n\r\nexport class CallGraphProvider extends WebviewProvider {\r\n\r\n    public override generateContent(webview: Webview, uri: Uri): string {\r\n        const fileName = uri.fsPath;\r\n        const baseName = path.basename(fileName, path.extname(fileName));\r\n\r\n        const graph = this.backend.getReferenceGraph(fileName);\r\n        const data: ICallGraphEntry[] = [];\r\n        for (const entry of graph) {\r\n            const references: string[] = [];\r\n            for (const ref of entry[1].rules) {\r\n                references.push(ref);\r\n            }\r\n\r\n            for (const ref of entry[1].tokens) {\r\n                references.push(ref);\r\n            }\r\n\r\n            data.push({ name: entry[0], references });\r\n        }\r\n\r\n        const rendererScriptPath = FrontendUtils.getOutPath(\"src/webview-scripts/CallGraphRenderer.js\", this.context,\r\n            webview);\r\n        const exportScriptPath = FrontendUtils.getOutPath(\"src/webview-scripts/GraphExport.js\", this.context,\r\n            webview);\r\n        const graphLibPath = FrontendUtils.getNodeModulesPath(webview, \"d3/dist/d3.js\", this.context);\r\n        const nonce = this.generateNonce();\r\n\r\n        const diagram = `<!DOCTYPE html>\r\n            <html>\r\n                <head>\r\n                    <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"/>\r\n                    ${this.generateContentSecurityPolicy(webview, nonce)}\r\n                    ${this.getStyles(webview)}\r\n                    <base href=\"${uri.toString(true)}\">\r\n                    <script nonce=\"${nonce}\" src=\"${graphLibPath}\"></script>\r\n                    <script nonce=\"${nonce}\">\r\n                        let callGraphRenderer;\r\n                        let graphExport;\r\n                    </script>\r\n                </head>\r\n\r\n            <body>\r\n                <div class=\"header\"><span class=\"call-graph-color\"><span class=\"graph-initial\">â’¸</span>all Graph</span>\r\n                    <span class=\"action-box\">\r\n                        <a onClick=\"callGraphRenderer.changeDiameter(0.8);\">\r\n                            <span class=\"call-graph-color\" style=\"font-size: 120%; font-weight: 800; cursor: pointer;\r\n                                vertical-align: middle;\">-</span>\r\n                        </a>\r\n                        <span style=\"margin-left: -5px; margin-right: -5px; cursor: default;\">Change radius</span>\r\n                        <a onClick=\"callGraphRenderer.changeDiameter(1.2);\">\r\n                            <span class=\"call-graph-color\" style=\"font-size: 120%; font-weight: 800; cursor: pointer;\r\n                                vertical-align: middle;\">+</span>\r\n                        </a>&nbsp;\r\n                        Save to SVG\r\n                        <a onClick=\"graphExport.exportToSVG('call-graph', '${baseName}');\">\r\n                            <span class=\"call-graph-save-image\" />\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n\r\n                <div id=\"container\">\r\n                    <svg></svg>\r\n                </div>\r\n                <script nonce=\"${nonce}\" type=\"module\">\r\n                    import { CallGraphRenderer } from \"${rendererScriptPath}\";\r\n                    import { GraphExport } from \"${exportScriptPath}\";\r\n\r\n                    const data = ${JSON.stringify(data)};\r\n                    callGraphRenderer = new CallGraphRenderer(data);\r\n                    graphExport = new GraphExport();\r\n\r\n                    callGraphRenderer.render();\r\n                </script>\r\n\r\n            </body>\r\n        </html>`;\r\n\r\n        return diagram;\r\n    }\r\n}\r\n"]}