{"version":3,"file":"WebviewProvider.js","sourceRoot":"","sources":["../../../../src/frontend/webviews/WebviewProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { basename, join } from \"path\";\r\n\r\nimport { window, workspace, TextEditor, ExtensionContext, Uri, WebviewPanel, Webview, ViewColumn } from \"vscode\";\r\n\r\nimport { AntlrFacade } from \"../../backend/facade\";\r\nimport { FrontendUtils } from \"../FrontendUtils\";\r\n\r\nexport interface IWebviewShowOptions {\r\n    [key: string]: boolean | number | string;\r\n\r\n    title: string;\r\n}\r\n\r\nexport interface IWebviewMessage {\r\n    [key: string]: unknown;\r\n}\r\n\r\n/**\r\n * The base class for all text document content providers, holding a number of support members needed by them.\r\n */\r\nexport class WebviewProvider {\r\n    protected currentRule: string | undefined;\r\n    protected currentRuleIndex: number | undefined;\r\n\r\n    // Keep track of all created panels, to avoid duplicates.\r\n    private webViewMap = new Map<String, [WebviewPanel, IWebviewShowOptions]>();\r\n\r\n    public constructor(protected backend: AntlrFacade, protected context: ExtensionContext) { }\r\n\r\n    public showWebview(uri: Uri, options: IWebviewShowOptions): void {\r\n        const uriString = uri.toString();\r\n\r\n        if (this.webViewMap.has(uriString)) {\r\n            const [existingPanel] = this.webViewMap.get(uriString)!;\r\n            existingPanel.title = options.title;\r\n            if (!this.updateContent(uri)) {\r\n                existingPanel.webview.html = this.generateContent(existingPanel.webview, uri, options);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const panel = window.createWebviewPanel(\"antlr4-vscode-webview\", options.title, ViewColumn.Two, {\r\n            enableScripts: true,\r\n            retainContextWhenHidden: true,\r\n        });\r\n        this.webViewMap.set(uriString, [panel, options]);\r\n\r\n        panel.onDidDispose(() => {\r\n            this.webViewMap.delete(uriString);\r\n        });\r\n\r\n        panel.webview.html = this.generateContent(panel.webview, uri, options);\r\n\r\n        panel.webview.onDidReceiveMessage((message: IWebviewMessage) => {\r\n            if (this.handleMessage(message)) {\r\n                return;\r\n            }\r\n\r\n            switch (message.command) {\r\n                case \"alert\": {\r\n                    if (typeof message.text === \"string\") {\r\n                        void window.showErrorMessage(message.text);\r\n                    } else {\r\n                        void window.showErrorMessage(String(message));\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                case \"saveSVG\": {\r\n                    if (typeof message.svg === \"string\" && typeof message.name === \"string\") {\r\n                        const css: string[] = [];\r\n                        css.push(FrontendUtils.getMiscPath(\"light.css\", this.context));\r\n                        const customStyles = workspace.getConfiguration(\"antlr4\").customCSS as string | string[];\r\n                        if (customStyles && Array.isArray(customStyles)) {\r\n                            for (const style of customStyles) {\r\n                                css.push(style);\r\n                            }\r\n                        }\r\n\r\n                        let svg = '<?xml version=\"1.0\" standalone=\"no\"?>\\n';\r\n                        for (const stylesheet of css) {\r\n                            svg += `<?xml-stylesheet href=\"${basename(stylesheet)}\" type=\"text/css\"?>\\n`;\r\n                        }\r\n\r\n                        svg += '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ' +\r\n                            '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' + message.svg;\r\n\r\n                        try {\r\n                            if (typeof message.type === \"string\") {\r\n                                const section = \"antlr4.\" + message.type;\r\n                                const saveDir = workspace.getConfiguration(section).saveDir as string ?? \"\";\r\n                                const target = join(saveDir, message.name + \".\" + message.type);\r\n                                FrontendUtils.exportDataWithConfirmation(target,\r\n                                    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                                    { \"Scalable Vector Graphic\": [\"svg\"] }, svg, css,\r\n                                );\r\n                            }\r\n                        } catch (error) {\r\n                            void window.showErrorMessage(\"Couldn't write SVG file: \" + String(error));\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                case \"saveHTML\": {\r\n                    if (typeof message.type === \"string\" && typeof message.name === \"string\") {\r\n                        const css: string[] = [];\r\n                        css.push(FrontendUtils.getMiscPath(\"light.css\", this.context));\r\n                        css.push(FrontendUtils.getMiscPath(\"dark.css\", this.context));\r\n                        const customStyles = workspace.getConfiguration(\"antlr4\").customCSS as string | string[];\r\n                        if (customStyles && Array.isArray(customStyles)) {\r\n                            for (const style of customStyles) {\r\n                                css.push(style);\r\n                            }\r\n                        }\r\n\r\n                        try {\r\n                            const section = \"antlr4.\" + message.type;\r\n                            const saveDir = workspace.getConfiguration(section).saveDir as string ?? \"\";\r\n                            const target = join(saveDir, message.name + \".\" + message.type);\r\n                            FrontendUtils.exportDataWithConfirmation(target,\r\n                                // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                                { HTML: [\"html\"] }, message.html as string, css);\r\n                        } catch (error) {\r\n                            void window.showErrorMessage(\"Couldn't write HTML file: \" + String(error));\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                default: {\r\n                    break;\r\n                }\r\n            }\r\n        }, undefined, this.context.subscriptions);\r\n    }\r\n\r\n    public update(editor: TextEditor): void {\r\n        if (this.webViewMap.has(editor.document.uri.toString())) {\r\n            const [panel, options] = this.webViewMap.get(editor.document.uri.toString())!;\r\n            if (!this.updateContent(editor.document.uri)) {\r\n                panel.webview.html = this.generateContent(panel.webview, editor.document.uri, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected generateContent(_webview: Webview, _source: Uri, _options: IWebviewShowOptions): string {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Constructs the required CSP entry for webviews, which allows them to load local files.\r\n     *\r\n     * @param webview The view for which to return the CSP tag.\r\n     * @param nonce A nonce for scripts.\r\n     *\r\n     * @returns The CSP string.\r\n     */\r\n    protected generateContentSecurityPolicy(webview: Webview, nonce: string): string {\r\n        return `<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\r\n            script-src 'nonce-${nonce}';\r\n            script-src-attr 'unsafe-inline';\r\n            style-src ${webview.cspSource} 'self' 'unsafe-inline';\r\n            img-src ${webview.cspSource} 'self' \"/>\r\n        `;\r\n    }\r\n\r\n    protected updateContent(_uri: Uri): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected sendMessage(uri: Uri, args: IWebviewMessage): boolean {\r\n        if (this.webViewMap.has(uri.toString())) {\r\n            const [panel] = this.webViewMap.get(uri.toString())!;\r\n            void panel.webview.postMessage(args);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Can be overridden by descendants to handle specific messages.\r\n    // Must return true when default handling shouldn't take place.\r\n    protected handleMessage(_message: IWebviewMessage): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getStyles(webView: Webview): string {\r\n        const baseStyles = [\r\n            FrontendUtils.getMiscPath(\"light.css\", this.context, webView),\r\n            FrontendUtils.getMiscPath(\"dark.css\", this.context, webView),\r\n        ];\r\n\r\n        const defaults = baseStyles.map((link) => {\r\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${link}\">`;\r\n        }).join(\"\\n\");\r\n\r\n        const paths = workspace.getConfiguration(\"antlr4\").customCSS as string | string[];\r\n        if (paths && Array.isArray(paths) && paths.length > 0) {\r\n            return defaults + \"\\n\" + paths.map((stylePath) => {\r\n                return `<link rel=\"stylesheet\" href=\"${webView.asWebviewUri(Uri.parse(stylePath)).toString()}\" ` +\r\n                    \"type=\\\"text/css\\\" media=\\\"screen\\\">\";\r\n            }).join(\"\\n\");\r\n        }\r\n\r\n        return defaults;\r\n    }\r\n\r\n    protected getScripts(nonce: string, scripts: string[]): string {\r\n        return scripts.map((source) => {\r\n            return `<script type=\"text/javascript\" src=\"${source}\" nonce=\"${nonce}\"></script>`;\r\n        }).join(\"\\n\");\r\n    }\r\n\r\n    protected generateNonce(): string {\r\n        return `${new Date().getTime()}${new Date().getMilliseconds()}`;\r\n    }\r\n}\r\n"]}