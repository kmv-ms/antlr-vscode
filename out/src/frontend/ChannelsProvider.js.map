{"version":3,"file":"ChannelsProvider.js","sourceRoot":"","sources":["../../../src/frontend/ChannelsProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,2CAA6B;AAE7B,mCAAqF;AACrF,mEAAgE;AAEhE,MAAa,YAAa,SAAQ,iBAAQ;IAUT;IACA;IATb,QAAQ,GAAG;QACvB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,mBAAmB,CAAC;QAC1E,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,kBAAkB,CAAC;KAC3E,CAAC;IAEc,YAAY,GAAG,UAAU,CAAC;IAE1C,YAC6B,KAAa,EACb,gBAA0C,EACnE,OAAiB;QAEjB,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QAJN,UAAK,GAAL,KAAK,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAA0B;QAInE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CAEJ;AAlBD,oCAkBC;AAED,MAAa,gBAAiB,SAAQ,6CAAmC;IAErD,WAAW,CAAC,OAAsB;QAC9C,IAAI,CAAC,OAAO,EAAE;YACV,IAAI,QAAQ,CAAC;YACb,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACzD;YAED,IAAI,QAAQ,EAAE;gBACV,MAAM,IAAI,GAAmB,EAAE,CAAC;gBAChC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;oBAC5B,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,MAAM,EAAE;wBAChC,SAAS;qBACZ;oBACD,IAAI,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,OAAO,EAAE,iCAAwB,CAAC,IAAI,EAAE;wBAC/D,KAAK,EAAE,UAAU;wBACjB,OAAO,EAAE,EAAE;wBACX,SAAS,EAAE,EAAE;qBAChB,CAAC,CAAC,CAAC;iBACP;gBAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;aACN;SACJ;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhCD,4CAgCC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { TreeItem, TreeItemCollapsibleState, Command, ProviderResult } from \"vscode\";\r\nimport { AntlrTreeDataProvider } from \"./AntlrTreeDataProvider\";\r\n\r\nexport class ChannelEntry extends TreeItem {\r\n\r\n    public override iconPath = {\r\n        light: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"channel-light.svg\"),\r\n        dark: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"channel-dark.svg\"),\r\n    };\r\n\r\n    public override contextValue = \"channels\";\r\n\r\n    public constructor(\r\n        public override readonly label: string,\r\n        public override readonly collapsibleState: TreeItemCollapsibleState,\r\n        command?: Command,\r\n    ) {\r\n        super(label, collapsibleState);\r\n        this.command = command;\r\n    }\r\n\r\n}\r\n\r\nexport class ChannelsProvider extends AntlrTreeDataProvider<ChannelEntry> {\r\n\r\n    public override getChildren(element?: ChannelEntry): ProviderResult<ChannelEntry[]> {\r\n        if (!element) {\r\n            let channels;\r\n            if (this.currentFile) {\r\n                channels = this.backend.getChannels(this.currentFile);\r\n            }\r\n\r\n            if (channels) {\r\n                const list: ChannelEntry[] = [];\r\n                for (const channel of channels) {\r\n                    if (!channel || channel === \"null\") {\r\n                        continue;\r\n                    }\r\n                    list.push(new ChannelEntry(channel, TreeItemCollapsibleState.None, {\r\n                        title: \"<unused>\",\r\n                        command: \"\",\r\n                        arguments: [],\r\n                    }));\r\n                }\r\n\r\n                return new Promise((resolve) => {\r\n                    resolve(list);\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            resolve([]);\r\n        });\r\n    }\r\n}\r\n"]}