{"version":3,"file":"ImportsProvider.js","sourceRoot":"","sources":["../../../src/frontend/ImportsProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,2CAA6B;AAE7B,mCAAqF;AACrF,mEAAgE;AAEhE,MAAa,MAAO,SAAQ,iBAAQ;IAUH;IACA;IATb,QAAQ,GAAG;QACvB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,sBAAsB,CAAC;QAC7E,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,qBAAqB,CAAC;KAC9E,CAAC;IAEc,YAAY,GAAG,oBAAoB,CAAC;IAEpD,YAC6B,KAAa,EACb,gBAA0C,EACnE,OAAiB;QAEjB,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QAJN,UAAK,GAAL,KAAK,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAA0B;QAInE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CAEJ;AAlBD,wBAkBC;AAED,MAAa,eAAgB,SAAQ,6CAA6B;IAE9C,WAAW,CAAC,OAAgB;QACxC,IAAI,CAAC,OAAO,EAAE;YACV,IAAI,YAAY,CAAC;YACjB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACjE;YAED,IAAI,YAAY,EAAE;gBACd,MAAM,OAAO,GAAa,EAAE,CAAC;gBAC7B,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;oBAC5B,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,iCAAwB,CAAC,IAAI,EAAE;wBACvE,KAAK,EAAE,UAAU;wBACjB,OAAO,EAAE,mBAAmB;wBAC5B,SAAS,EAAE,CAAC,GAAG,CAAC;qBACnB,CAAC,CAAC,CAAC;iBACP;gBAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBAC3B,OAAO,CAAC,OAAO,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC;aACN;SACJ;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA7BD,0CA6BC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { TreeItem, TreeItemCollapsibleState, Command, ProviderResult } from \"vscode\";\r\nimport { AntlrTreeDataProvider } from \"./AntlrTreeDataProvider\";\r\n\r\nexport class Import extends TreeItem {\r\n\r\n    public override iconPath = {\r\n        light: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"dependency-light.svg\"),\r\n        dark: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"dependency-dark.svg\"),\r\n    };\r\n\r\n    public override contextValue = \"grammar-dependency\";\r\n\r\n    public constructor(\r\n        public override readonly label: string,\r\n        public override readonly collapsibleState: TreeItemCollapsibleState,\r\n        command?: Command,\r\n    ) {\r\n        super(label, collapsibleState);\r\n        this.command = command;\r\n    }\r\n\r\n}\r\n\r\nexport class ImportsProvider extends AntlrTreeDataProvider<Import> {\r\n\r\n    public override getChildren(element?: Import): ProviderResult<Import[]> {\r\n        if (!element) {\r\n            let dependencies;\r\n            if (this.currentFile) {\r\n                dependencies = this.backend.getDependencies(this.currentFile);\r\n            }\r\n\r\n            if (dependencies) {\r\n                const imports: Import[] = [];\r\n                for (const dep of dependencies) {\r\n                    imports.push(new Import(path.basename(dep), TreeItemCollapsibleState.None, {\r\n                        title: \"<unused>\",\r\n                        command: \"antlr.openGrammar\",\r\n                        arguments: [dep],\r\n                    }));\r\n                }\r\n\r\n                return new Promise((resolve) => {\r\n                    resolve(imports);\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            resolve([]);\r\n        });\r\n    }\r\n}\r\n"]}