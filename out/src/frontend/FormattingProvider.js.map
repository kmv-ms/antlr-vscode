{"version":3,"file":"FormattingProvider.js","sourceRoot":"","sources":["../../../src/frontend/FormattingProvider.ts"],"names":[],"mappings":";;;AAMA,mCAGgB;AAEhB,MAAa,uBAAuB;IACL;IAA3B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,mCAAmC,CAAC,QAAsB,EAAE,KAAY,EAAE,QAA2B,EACxG,MAAyB;QAEzB,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE3C,MAAM,aAAa,GAAG,kBAAS,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAClE,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,KAAK,EACtG,GAAG,CAAC,CAAC;QACT,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QAEzF,OAAO,CAAC,iBAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;IACjD,CAAC;CACJ;AAjBD,0DAiBC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { AntlrFacade } from \"../backend/facade\";\r\nimport {\r\n    DocumentRangeFormattingEditProvider, TextDocument, FormattingOptions, CancellationToken, ProviderResult, TextEdit,\r\n    Range, workspace,\r\n} from \"vscode\";\r\n\r\nexport class AntlrFormattingProvider implements DocumentRangeFormattingEditProvider {\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public provideDocumentRangeFormattingEdits(document: TextDocument, range: Range, _options: FormattingOptions,\r\n        _token: CancellationToken): ProviderResult<TextEdit[]> {\r\n\r\n        let start = document.offsetAt(range.start);\r\n        let end = document.offsetAt(range.end) - 1; // Make the end inclusive.\r\n\r\n        const formatOptions = workspace.getConfiguration(\"antlr4.format\");\r\n        let text = \"\";\r\n        [text, start, end] = this.backend.formatGrammar(document.fileName, Object.assign({}, formatOptions), start,\r\n            end);\r\n        const resultRange = range.with(document.positionAt(start), document.positionAt(end + 1));\r\n\r\n        return [TextEdit.replace(resultRange, text)];\r\n    }\r\n}\r\n"]}