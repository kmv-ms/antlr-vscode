{"version":3,"file":"CodeLensProvider.js","sourceRoot":"","sources":["../../../src/frontend/CodeLensProvider.ts"],"names":[],"mappings":";;;AAOA,mCAEgB;AAEhB,4CAA2D;AAE3D,MAAM,cAAe,SAAQ,iBAAQ;IACP;IAA1B,YAA0B,MAAmB,EAAE,KAAY;QACvD,KAAK,CAAC,KAAK,CAAC,CAAC;QADS,WAAM,GAAN,MAAM,CAAa;IAE7C,CAAC;CACJ;AAED,MAAa,qBAAqB;IAIH;IAHnB,WAAW,GAAG,IAAI,qBAAY,EAAQ,CAAC;IACvC,YAAY,CAAS;IAE7B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAEpD,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAClC,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAEM,iBAAiB,CAAC,QAAsB,EAAE,MAAyB;QACtE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,kBAAS,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAC,OAAO,KAAK,IAAI,EAAE;gBAC1E,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB;iBAAM;gBACH,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBACtC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAC3E,MAAM,MAAM,GAAG,EAAE,CAAC;gBAClB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;wBACpB,SAAS;qBACZ;oBAED,QAAQ,MAAM,CAAC,IAAI,EAAE;wBACjB,KAAK,kBAAU,CAAC,kBAAkB,CAAC;wBACnC,KAAK,kBAAU,CAAC,SAAS,CAAC;wBAC1B,KAAK,kBAAU,CAAC,SAAS,CAAC;wBAC1B,KAAK,kBAAU,CAAC,UAAU,CAAC,CAAC;4BACxB,MAAM,KAAK,GAAG,IAAI,cAAK,CACnB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EACrC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EACpC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EACnC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CACrC,CAAC;4BACF,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;4BAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAElB,MAAM;yBACT;wBAED,QAAQ;qBACX;iBACJ;gBAED,OAAO,CAAC,MAAM,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAe,CAAC,QAAkB,EAAE,MAAyB;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAG,QAA2B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvG,QAAQ,CAAC,OAAO,GAAG;YACf,KAAK,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa;YAC1D,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,SAAS;SACvB,CAAC;QAEF,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AA/DD,sDA+DC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    workspace, CodeLensProvider, TextDocument, CancellationToken, CodeLens, Range, EventEmitter, Event, ProviderResult,\r\n} from \"vscode\";\r\nimport { AntlrFacade } from \"../backend/facade\";\r\nimport { ISymbolInfo, SymbolKind } from \"../backend/types\";\r\n\r\nclass SymbolCodeLens extends CodeLens {\r\n    public constructor(public symbol: ISymbolInfo, range: Range) {\r\n        super(range);\r\n    }\r\n}\r\n\r\nexport class AntlrCodeLensProvider implements CodeLensProvider {\r\n    private changeEvent = new EventEmitter<void>();\r\n    private documentName: string;\r\n\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public get onDidChangeCodeLenses(): Event<void> {\r\n        return this.changeEvent.event;\r\n    }\r\n\r\n    public refresh(): void {\r\n        this.changeEvent.fire();\r\n    }\r\n\r\n    public provideCodeLenses(document: TextDocument, _token: CancellationToken): ProviderResult<CodeLens[]> {\r\n        return new Promise((resolve) => {\r\n            if (workspace.getConfiguration(\"antlr4.referencesCodeLens\").enabled !== true) {\r\n                resolve(null);\r\n            } else {\r\n                this.documentName = document.fileName;\r\n                const symbols = this.backend.listTopLevelSymbols(document.fileName, false);\r\n                const lenses = [];\r\n                for (const symbol of symbols) {\r\n                    if (!symbol.definition) {\r\n                        continue;\r\n                    }\r\n\r\n                    switch (symbol.kind) {\r\n                        case SymbolKind.FragmentLexerToken:\r\n                        case SymbolKind.LexerRule:\r\n                        case SymbolKind.LexerMode:\r\n                        case SymbolKind.ParserRule: {\r\n                            const range = new Range(\r\n                                symbol.definition.range.start.row - 1,\r\n                                symbol.definition.range.start.column,\r\n                                symbol.definition.range.end.row - 1,\r\n                                symbol.definition.range.end.column,\r\n                            );\r\n                            const lens = new SymbolCodeLens(symbol, range);\r\n                            lenses.push(lens);\r\n\r\n                            break;\r\n                        }\r\n\r\n                        default:\r\n                    }\r\n                }\r\n\r\n                resolve(lenses);\r\n            }\r\n        });\r\n    }\r\n\r\n    public resolveCodeLens(codeLens: CodeLens, _token: CancellationToken): ProviderResult<CodeLens> {\r\n        const refs = this.backend.countReferences(this.documentName, (codeLens as SymbolCodeLens).symbol.name);\r\n        codeLens.command = {\r\n            title: (refs === 1) ? \"1 reference\" : `${refs} references`,\r\n            command: \"\",\r\n            arguments: undefined,\r\n        };\r\n\r\n        return codeLens;\r\n    }\r\n}\r\n"]}