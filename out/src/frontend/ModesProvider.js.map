{"version":3,"file":"ModesProvider.js","sourceRoot":"","sources":["../../../src/frontend/ModesProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,2CAA6B;AAE7B,mCAAqF;AACrF,mEAAgE;AAEhE,MAAa,SAAU,SAAQ,iBAAQ;IAUN;IACA;IATb,QAAQ,GAAG;QACvB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,CAAC;QACvE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC;KACxE,CAAC;IAEc,YAAY,GAAG,cAAc,CAAC;IAE9C,YAC6B,KAAa,EACb,gBAA0C,EACnE,OAAiB;QAEjB,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QAJN,UAAK,GAAL,KAAK,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAA0B;QAInE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAjBD,8BAiBC;AAED,MAAa,aAAc,SAAQ,6CAAgC;IAE/C,WAAW,CAAC,OAAkB;QAC1C,OAAO,OAAO,CAAC;IACnB,CAAC;IAEe,WAAW,CAAC,OAAmB;QAC3C,IAAI,CAAC,OAAO,EAAE;YACV,IAAI,KAAK,CAAC;YACV,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACnD;YAED,IAAI,KAAK,EAAE;gBACP,MAAM,IAAI,GAAgB,EAAE,CAAC;gBAC7B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;oBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,EAAE,iCAAwB,CAAC,IAAI,EAAE;wBACzD,KAAK,EAAE,UAAU;wBACjB,OAAO,EAAE,EAAE;wBACX,SAAS,EAAE,EAAE;qBAChB,CAAC,CAAC,CAAC;iBACP;gBAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;aACN;SACJ;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AAlCD,sCAkCC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { TreeItem, TreeItemCollapsibleState, Command, ProviderResult } from \"vscode\";\r\nimport { AntlrTreeDataProvider } from \"./AntlrTreeDataProvider\";\r\n\r\nexport class ModeEntry extends TreeItem {\r\n\r\n    public override iconPath = {\r\n        light: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"mode-light.svg\"),\r\n        dark: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"mode-dark.svg\"),\r\n    };\r\n\r\n    public override contextValue = \"lexerSymbols\";\r\n\r\n    public constructor(\r\n        public override readonly label: string,\r\n        public override readonly collapsibleState: TreeItemCollapsibleState,\r\n        command?: Command,\r\n    ) {\r\n        super(label, collapsibleState);\r\n        this.command = command;\r\n    }\r\n}\r\n\r\nexport class ModesProvider extends AntlrTreeDataProvider<ModeEntry> {\r\n\r\n    public override getTreeItem(element: ModeEntry): TreeItem {\r\n        return element;\r\n    }\r\n\r\n    public override getChildren(element?: ModeEntry): ProviderResult<ModeEntry[]> {\r\n        if (!element) {\r\n            let modes;\r\n            if (this.currentFile) {\r\n                modes = this.backend.getModes(this.currentFile);\r\n            }\r\n\r\n            if (modes) {\r\n                const list: ModeEntry[] = [];\r\n                for (const mode of modes) {\r\n                    list.push(new ModeEntry(mode, TreeItemCollapsibleState.None, {\r\n                        title: \"<unused>\",\r\n                        command: \"\",\r\n                        arguments: [],\r\n                    }));\r\n                }\r\n\r\n                return new Promise((resolve) => {\r\n                    resolve(list);\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            resolve([]);\r\n        });\r\n    }\r\n\r\n}\r\n"]}