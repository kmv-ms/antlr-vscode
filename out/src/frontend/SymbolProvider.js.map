{"version":3,"file":"SymbolProvider.js","sourceRoot":"","sources":["../../../src/frontend/SymbolProvider.ts"],"names":[],"mappings":";;;AAIA,mCAEgB;AAGhB,4CAA8C;AAC9C,qCAA0E;AAE1E,MAAa,mBAAmB;IACD;IAA3B,YAA2B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,sBAAsB,CAAC,QAAsB,EAChD,OAA0B;QAE1B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC3E,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;oBACpB,SAAS;iBACZ;gBAED,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnG,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7F,MAAM,KAAK,GAAG,IAAI,cAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAC1E,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACxC,MAAM,QAAQ,GAAG,IAAI,iBAAQ,CAAC,YAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;gBAE9D,IAAI,WAAW,GAAG,IAAA,kCAAyB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACzD,MAAM,IAAI,GAAG,IAAA,4BAAmB,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC9C,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBACpE,IAAI,MAAM,CAAC,IAAI,KAAK,kBAAU,CAAC,SAAS,IAAI,eAAe,GAAG,EAAE,EAAE;oBAI9D,MAAM,WAAW,GAAG,EAAE,GAAG,eAAe,CAAC;oBACzC,WAAW,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;iBAChD;gBACD,MAAM,IAAI,GAAG,IAAI,0BAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;gBAC7E,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1B;YAED,OAAO,CAAC,WAAW,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AArCD,kDAqCC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport {\r\n    TextDocument, CancellationToken, Range, Location, Uri, SymbolInformation, DocumentSymbolProvider, ProviderResult,\r\n} from \"vscode\";\r\n\r\nimport { AntlrFacade } from \"../backend/facade\";\r\nimport { SymbolKind } from \"../backend/types\";\r\nimport { symbolDescriptionFromEnum, translateSymbolKind } from \"./Symbol\";\r\n\r\nexport class AntlrSymbolProvider implements DocumentSymbolProvider {\r\n    public constructor(private backend: AntlrFacade) { }\r\n\r\n    public provideDocumentSymbols(document: TextDocument,\r\n        _cancel: CancellationToken): ProviderResult<SymbolInformation[]> {\r\n\r\n        return new Promise((resolve) => {\r\n            const symbols = this.backend.listTopLevelSymbols(document.fileName, false);\r\n            const symbolsList = [];\r\n            for (const symbol of symbols) {\r\n                if (!symbol.definition) {\r\n                    continue;\r\n                }\r\n\r\n                const startRow = symbol.definition.range.start.row > 0 ? symbol.definition.range.start.row - 1 : 0;\r\n                const endRow = symbol.definition.range.end.row > 0 ? symbol.definition.range.end.row - 1 : 0;\r\n                const range = new Range(startRow, symbol.definition.range.start.column, endRow,\r\n                    symbol.definition.range.end.column);\r\n                const location = new Location(Uri.file(symbol.source), range);\r\n\r\n                let description = symbolDescriptionFromEnum(symbol.kind);\r\n                const kind = translateSymbolKind(symbol.kind);\r\n                const totalTextLength = symbol.name.length + description.length + 1;\r\n                if (symbol.kind === SymbolKind.LexerMode && totalTextLength < 80) {\r\n                    // Add a marker to show parts which belong to a particular lexer mode.\r\n                    // Not 100% perfect (i.e. right aligned, as symbol and description use different fonts),\r\n                    // but good enough.\r\n                    const markerWidth = 80 - totalTextLength;\r\n                    description += \" \" + \"-\".repeat(markerWidth);\r\n                }\r\n                const info = new SymbolInformation(symbol.name, kind, description, location);\r\n                symbolsList.push(info);\r\n            }\r\n\r\n            resolve(symbolsList);\r\n        });\r\n    }\r\n}\r\n"]}