{"version":3,"file":"ActionsProvider.js","sourceRoot":"","sources":["../../../src/frontend/ActionsProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { TreeItem, TreeItemCollapsibleState, Command, TextEditor, TreeView, ProviderResult } from \"vscode\";\r\nimport { AntlrTreeDataProvider } from \"./AntlrTreeDataProvider\";\r\nimport { ILexicalRange, CodeActionType } from \"../backend/types\";\r\nimport { FrontendUtils, IRangeHolder } from \"./FrontendUtils\";\r\n\r\nexport class RootEntry extends TreeItem {\r\n\r\n    public override contextValue = \"actions\";\r\n\r\n    public constructor(label: string, id: string) {\r\n        super(label, TreeItemCollapsibleState.Expanded);\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class ChildEntry extends TreeItem implements IRangeHolder {\r\n\r\n    private static imageBaseNames: Map<CodeActionType, string> = new Map([\r\n        [CodeActionType.GlobalNamed, \"named-action\"],\r\n        [CodeActionType.LocalNamed, \"named-action\"],\r\n        [CodeActionType.ParserAction, \"parser-action\"],\r\n        [CodeActionType.LexerAction, \"parser-action\"],\r\n        [CodeActionType.ParserPredicate, \"predicate\"],\r\n        [CodeActionType.LexerPredicate, \"predicate\"],\r\n    ]);\r\n\r\n    public override contextValue = \"action\";\r\n\r\n    public constructor(\r\n        public readonly parent: RootEntry,\r\n        label: string,\r\n        type: CodeActionType,\r\n        public readonly range?: ILexicalRange,\r\n        command?: Command) {\r\n\r\n        super(label, TreeItemCollapsibleState.None);\r\n        this.command = command;\r\n\r\n        const baseName = ChildEntry.imageBaseNames.get(type);\r\n        if (baseName) {\r\n            this.contextValue = baseName;\r\n            this.iconPath = {\r\n                light: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", baseName + \"-light.svg\"),\r\n                dark: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", baseName + \"-dark.svg\"),\r\n            };\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class ActionsProvider extends AntlrTreeDataProvider<TreeItem> {\r\n\r\n    public actionTree: TreeView<TreeItem>;\r\n\r\n    private globalNamedActionsRoot: RootEntry;\r\n    private localNamedActionsRoot: RootEntry;\r\n    private parserActionsRoot: RootEntry;\r\n    private lexerActionsRoot: RootEntry;\r\n    private parserPredicatesRoot: RootEntry;\r\n    private lexerPredicatesRoot: RootEntry;\r\n\r\n    private globalNamedActions: ChildEntry[] = [];\r\n    private localNamedActions: ChildEntry[] = [];\r\n    private parserActions: ChildEntry[] = [];\r\n    private lexerActions: ChildEntry[] = [];\r\n    private parserPredicates: ChildEntry[] = [];\r\n    private lexerPredicates: ChildEntry[] = [];\r\n\r\n    public update(editor: TextEditor): void {\r\n        const position = editor.selection.active;\r\n\r\n        let action = FrontendUtils.findInListFromPosition(this.globalNamedActions, position.character,\r\n            position.line + 1);\r\n\r\n        if (!action) {\r\n            action = FrontendUtils.findInListFromPosition(this.localNamedActions, position.character,\r\n                position.line + 1);\r\n        }\r\n\r\n        if (!action) {\r\n            action = FrontendUtils.findInListFromPosition(this.parserActions, position.character, position.line + 1);\r\n        }\r\n\r\n        if (!action) {\r\n            action = FrontendUtils.findInListFromPosition(this.lexerActions, position.character, position.line + 1);\r\n        }\r\n\r\n        if (!action) {\r\n            action = FrontendUtils.findInListFromPosition(this.parserPredicates, position.character, position.line + 1);\r\n        }\r\n\r\n        if (!action) {\r\n            action = FrontendUtils.findInListFromPosition(this.lexerPredicates, position.character, position.line + 1);\r\n        }\r\n\r\n        if (action) {\r\n            void this.actionTree.reveal(action, { select: true });\r\n        }\r\n    }\r\n\r\n    public getParent?(element: TreeItem): ProviderResult<TreeItem> {\r\n        if (element instanceof RootEntry) {\r\n            return undefined;\r\n        }\r\n\r\n        return (element as ChildEntry).parent;\r\n    }\r\n\r\n    public override getChildren(element?: TreeItem): ProviderResult<TreeItem[]> {\r\n        if (!this.currentFile) {\r\n            return null;\r\n        }\r\n\r\n        if (!element) {\r\n            return this.createRootEntries();\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.currentFile) {\r\n                resolve(undefined);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                let listType: CodeActionType;\r\n                let parent: RootEntry;\r\n                let list: ChildEntry[];\r\n\r\n                switch (element.id) {\r\n                    case \"parserActions\": {\r\n                        this.parserActions = [];\r\n                        list = this.parserActions;\r\n                        listType = CodeActionType.ParserAction;\r\n                        parent = this.parserActionsRoot;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case \"lexerActions\": {\r\n                        this.lexerActions = [];\r\n                        list = this.lexerActions;\r\n                        listType = CodeActionType.LexerAction;\r\n                        parent = this.lexerActionsRoot;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case \"parserPredicates\": {\r\n                        this.parserPredicates = [];\r\n                        list = this.parserPredicates;\r\n                        listType = CodeActionType.ParserPredicate;\r\n                        parent = this.parserPredicatesRoot;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case \"lexerPredicates\": {\r\n                        this.lexerPredicates = [];\r\n                        list = this.lexerPredicates;\r\n                        listType = CodeActionType.LexerPredicate;\r\n                        parent = this.lexerPredicatesRoot;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case \"globalNamedActions\": {\r\n                        this.globalNamedActions = [];\r\n                        list = this.globalNamedActions;\r\n                        listType = CodeActionType.GlobalNamed;\r\n                        parent = this.globalNamedActionsRoot;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        this.localNamedActions = [];\r\n                        list = this.localNamedActions;\r\n                        listType = CodeActionType.LocalNamed;\r\n                        parent = this.localNamedActionsRoot;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                const actions = this.backend.listActions(this.currentFile, listType);\r\n\r\n                actions.forEach((action, index) => {\r\n                    let caption = action.name.length > 0 ? action.name : String(index);\r\n                    if (action.description) {\r\n                        if (action.description.includes(\"\\n\")) {\r\n                            caption += \": <multi line block>\";\r\n                        } else {\r\n                            caption += \": \" + action.description;\r\n                        }\r\n                    }\r\n\r\n                    const range = action && action.definition ? action.definition.range : undefined;\r\n                    const command = action ? {\r\n                        title: \"Select Grammar Range\",\r\n                        command: \"antlr.selectGrammarRange\",\r\n                        arguments: [range],\r\n                    } : undefined;\r\n\r\n                    const item = new ChildEntry(parent, caption.trim(), listType, range, command);\r\n                    list.push(item);\r\n                });\r\n\r\n                resolve(list);\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the root entries for the actions treeview.\r\n     *\r\n     * @returns A promise resolving to a list of root tree items.\r\n     */\r\n    private createRootEntries(): ProviderResult<TreeItem[]> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.currentFile) {\r\n                return null;\r\n            }\r\n\r\n            try {\r\n                const rootList: RootEntry[] = [];\r\n\r\n                const counts = this.backend.getActionCounts(this.currentFile);\r\n\r\n                if ((counts.get(CodeActionType.GlobalNamed) ?? 0) > 0) {\r\n                    this.globalNamedActionsRoot = new RootEntry(\"Global Named Actions\", \"globalNamedActions\");\r\n                    this.globalNamedActionsRoot.tooltip = \"Code which is embedded into the generated files \" +\r\n                        \"at specific locations (like the head of the file).\\n\\n\" +\r\n                        \"This code does not take part in the parsing process and is not represented in the ATN.\";\r\n                    rootList.push(this.globalNamedActionsRoot);\r\n                }\r\n\r\n                if ((counts.get(CodeActionType.LocalNamed) ?? 0) > 0) {\r\n                    this.localNamedActionsRoot = new RootEntry(\"Local Named Actions\", \"localNamedActions\");\r\n                    this.localNamedActionsRoot.tooltip = \"Code which is embedded into the generated parser code \" +\r\n                        \"for a rule, like initialization code (@init). \\n\\n\" +\r\n                        \"This code is directly executed during the parsing process, but is not represented in the ATN.\";\r\n                    rootList.push(this.localNamedActionsRoot);\r\n                }\r\n\r\n                if ((counts.get(CodeActionType.ParserAction) ?? 0) > 0) {\r\n                    this.parserActionsRoot = new RootEntry(\"Parser Actions\", \"parserActions\");\r\n                    this.parserActionsRoot.tooltip = \"Code which is embedded into the generated parser \" +\r\n                        \"code and executed as part of the parsing process. There are also transitions in the ATN for \" +\r\n                        \"each action, but they are not used from the generated parser (all action indices are -1).\";\r\n                    rootList.push(this.parserActionsRoot);\r\n                }\r\n\r\n                if ((counts.get(CodeActionType.LexerAction) ?? 0) > 0) {\r\n                    this.lexerActionsRoot = new RootEntry(\"Lexer Actions\", \"lexerActions\");\r\n                    this.lexerActionsRoot.tooltip = \"Lexer rules are executed in a state machine without \" +\r\n                        \"any embedded code. However lexer actions are held in generated private methods addressed \" +\r\n                        \"by an action index given in the action transition between 2 ATN nodes.\";\r\n                    rootList.push(this.lexerActionsRoot);\r\n                }\r\n\r\n                if ((counts.get(CodeActionType.ParserPredicate) ?? 0) > 0) {\r\n                    this.parserPredicatesRoot = new RootEntry(\"Parser Predicates\", \"parserPredicates\");\r\n                    this.parserPredicatesRoot.tooltip = \"Semantic predicates are code snippets which can enable or \" +\r\n                        \"disable a specific alternative in a rule. They are generated in separate methods and are \" +\r\n                        \"addressed by an index just like lexer actions.\\n\\n\" +\r\n                        \"The ATN representation of a predicate is a predicate transition between 2 ATN nodes.\";\r\n                    rootList.push(this.parserPredicatesRoot);\r\n                }\r\n\r\n                if ((counts.get(CodeActionType.LexerPredicate) ?? 0) > 0) {\r\n                    this.lexerPredicatesRoot = new RootEntry(\"Lexer Predicates\", \"lexerPredicates\");\r\n                    this.lexerPredicatesRoot.tooltip = \"Semantic predicates are code snippets which can enable or \" +\r\n                        \"disable a specific alternative in a rule. They are generated in separate methods and are \" +\r\n                        \"addressed by an index just like lexer actions.\\n\\n\" +\r\n                        \"The ATN representation of a predicate is a predicate transition between 2 ATN nodes.\";\r\n                    rootList.push(this.lexerPredicatesRoot);\r\n                }\r\n\r\n                resolve(rootList);\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}