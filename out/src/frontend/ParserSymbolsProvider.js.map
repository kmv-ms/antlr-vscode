{"version":3,"file":"ParserSymbolsProvider.js","sourceRoot":"","sources":["../../../src/frontend/ParserSymbolsProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,2CAA6B;AAE7B,mCAAqF;AACrF,mEAAgE;AAEhE,MAAa,YAAa,SAAQ,iBAAQ;IAUT;IACA;IATb,QAAQ,GAAG;QACvB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,CAAC;QACvE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC;KACxE,CAAC;IAEc,YAAY,GAAG,eAAe,CAAC;IAE/C,YAC6B,KAAa,EACb,gBAA0C,EACnE,OAAiB;QAEjB,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QAJN,UAAK,GAAL,KAAK,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAA0B;QAInE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CAEJ;AAlBD,oCAkBC;AAED,MAAa,qBAAsB,SAAQ,6CAAmC;IAE1D,WAAW,CAAC,OAAsB;QAC9C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,EAAE;gBACV,IAAI,KAA2B,CAAC;gBAChC,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBACtD;gBAED,MAAM,IAAI,GAAmB,EAAE,CAAC;gBAChC,IAAI,KAAK,EAAE;oBACP,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;wBAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,WAAY,EAAE,IAAI,CAAC,CAAC;wBACjE,MAAM,UAAU,GAAY,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;wBACvD,MAAM,OAAO,GAAG,GAAG,KAAK,KAAK,KAAM,CAAC,KAAK,CAAC,EAAE,CAAC;wBAC7C,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;4BACzB,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;4BACtB,UAAU,CAAC,OAAO,GAAG,0BAA0B,CAAC;4BAChD,UAAU,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;yBAClD;wBAED,IAAI,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,OAAO,EAAE,iCAAwB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;oBACpF,CAAC,CAAC,CAAC;iBACN;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA9BD,sDA8BC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport * as path from \"path\";\r\n\r\nimport { TreeItem, TreeItemCollapsibleState, Command, ProviderResult } from \"vscode\";\r\nimport { AntlrTreeDataProvider } from \"./AntlrTreeDataProvider\";\r\n\r\nexport class ParserSymbol extends TreeItem {\r\n\r\n    public override iconPath = {\r\n        light: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"rule-light.svg\"),\r\n        dark: path.join(__dirname, \"..\", \"..\", \"..\", \"misc\", \"rule-dark.svg\"),\r\n    };\r\n\r\n    public override contextValue = \"parserSymbols\";\r\n\r\n    public constructor(\r\n        public override readonly label: string,\r\n        public override readonly collapsibleState: TreeItemCollapsibleState,\r\n        command?: Command,\r\n    ) {\r\n        super(label, collapsibleState);\r\n        this.command = command;\r\n    }\r\n\r\n}\r\n\r\nexport class ParserSymbolsProvider extends AntlrTreeDataProvider<ParserSymbol> {\r\n\r\n    public override getChildren(element?: ParserSymbol): ProviderResult<ParserSymbol[]> {\r\n        return new Promise((resolve) => {\r\n            if (!element) {\r\n                let rules: string[] | undefined;\r\n                if (this.currentFile) {\r\n                    rules = this.backend.getRuleList(this.currentFile);\r\n                }\r\n\r\n                const list: ParserSymbol[] = [];\r\n                if (rules) {\r\n                    rules.forEach((rule, index) => {\r\n                        const info = this.backend.infoForSymbol(this.currentFile!, rule);\r\n                        const parameters: Command = { title: \"\", command: \"\" };\r\n                        const caption = `${index}: ${rules![index]}`;\r\n                        if (info && info.definition) {\r\n                            parameters.title = \"\";\r\n                            parameters.command = \"antlr.selectGrammarRange\";\r\n                            parameters.arguments = [info.definition.range];\r\n                        }\r\n\r\n                        list.push(new ParserSymbol(caption, TreeItemCollapsibleState.None, parameters));\r\n                    });\r\n                }\r\n\r\n                resolve(list);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}