{"version":3,"file":"atn.spec.js","sourceRoot":"","sources":["../../../test/backend/atn.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as fs from \"fs\";\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\n\r\ndescribe(\"ATN Tests\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"ATN Rule Graph, split grammar\", async () => {\r\n        // Need code generation here. Details will be tested later. The ATN retrieval will fail\r\n        // anyway when generation fails.\r\n        const files = await backend.generate(\"grammars/ANTLRv4Parser.g4\", {\r\n            outputDir: \"generated-atn\",\r\n            language: \"Typescript\",\r\n            alternativeJar: \"antlr/antlr4-typescript-4.9.0-SNAPSHOT-complete.jar\",\r\n        });\r\n        files.forEach((file) => {\r\n            const diagnostics = backend.getDiagnostics(file);\r\n            if (diagnostics.length > 0) {\r\n                console.log(JSON.stringify(diagnostics, undefined, 4));\r\n            }\r\n            expect(diagnostics).toHaveLength(0);\r\n        });\r\n\r\n        const graph = backend.getATNGraph(\"grammars/ANTLRv4Parser.g4\", \"ruleModifier\");\r\n\r\n        try {\r\n            expect(graph).toBeDefined();\r\n            if (graph) {\r\n                expect(graph.nodes).toHaveLength(4);\r\n                expect(graph.nodes[0].name).toEqual(\"56\");\r\n                expect(graph.nodes[0].type).toEqual(2);\r\n                expect(graph.nodes[1].name).toEqual(\"364\");\r\n                expect(graph.nodes[1].type).toEqual(1);\r\n                expect(graph.nodes[2].name).toEqual(\"365\");\r\n                expect(graph.nodes[2].type).toEqual(1);\r\n                expect(graph.nodes[3].name).toEqual(\"57\");\r\n                expect(graph.nodes[3].type).toEqual(7);\r\n\r\n                expect(graph.links).toHaveLength(3);\r\n                expect(graph.links[0].source).toEqual(0);\r\n                expect(graph.links[0].target).toEqual(1);\r\n                expect(graph.links[0].type).toEqual(1);\r\n                expect(graph.links[0].labels).toHaveLength(1);\r\n                expect(graph.links[0].labels[0]).toStrictEqual({ content: \"ε\" });\r\n\r\n                expect(graph.links[1].source).toEqual(1);\r\n                expect(graph.links[1].target).toEqual(2);\r\n                expect(graph.links[1].type).toEqual(7);\r\n                expect(graph.links[1].labels).toHaveLength(5);\r\n                expect(graph.links[1].labels[0]).toStrictEqual({ content: \"Set Transition\", class: \"heading\" });\r\n                expect(graph.links[1].labels[3]).toStrictEqual({ content: \"'public'\" });\r\n\r\n                expect(graph.links[2].source).toEqual(2);\r\n                expect(graph.links[2].target).toEqual(3);\r\n                expect(graph.links[2].type).toEqual(1);\r\n                expect(graph.links[2].labels).toHaveLength(1);\r\n                expect(graph.links[2].labels[0]).toStrictEqual({ content: \"ε\" });\r\n            }\r\n        } finally {\r\n            fs.rmSync(\"generated-atn\", { recursive: true, force: true });\r\n            backend.releaseGrammar(\"grammars/ANTLRv4Parser.g4\");\r\n        }\r\n    });\r\n});\r\n"]}