{"version":3,"file":"advanced-symbol-info.spec.js","sourceRoot":"","sources":["../../../test/backend/advanced-symbol-info.spec.ts"],"names":[],"mappings":";;AAKA,qDAAuD;AAEvD,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACzC,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAEvB,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACnB,IAAI,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,+DAA+D;YACnF,4FAA4F,CAAC,CAAC;QAElG,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,mCAAmC,EAAE,SAAS,CAAC,CAAC;QAC/E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,2DAA2D;YAC/E,4FAA4F;YAC5F,mCAAmC,CAAC,CAAC;QAEzC,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC;QAC5E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,yDAAyD;YAC7E,yCAAyC;YACzC,sGAAsG;YACtG,qGAAqG;YACrG,4FAA4F;YAC5F,kGAAkG;YAClG,iGAAiG;YACjG,wCAAwC,CAC3C,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACvB,MAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE/B,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,OAAO,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;SAC3D;QAED,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,OAAO,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;SACvD;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\n\r\ndescribe(\"Advanced Symbol Information\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"RRD diagram\", () => {\r\n        let diagram = backend.getRRDScript(\"test/backend/test-data/TLexer.g4\", \"Any\");\r\n        expect(diagram).toEqual(\"Diagram(Choice(0, Sequence(Terminal('Foo'), Terminal('Dot'), \" +\r\n            \"Optional(Terminal('Bar')), Terminal('DotDot'), Terminal('Baz'), Terminal('Bar')))).addTo()\");\r\n\r\n        diagram = backend.getRRDScript(\"test/backend/test-data/TParser.g4\", \"idarray\");\r\n        expect(diagram).toEqual(\"ComplexDiagram(Choice(0, Sequence(Terminal('OpenCurly'), \" +\r\n            \"NonTerminal('id'), ZeroOrMore(Choice(0, Sequence(Terminal('Comma'), NonTerminal('id')))), \" +\r\n            \"Terminal('CloseCurly')))).addTo()\");\r\n\r\n        diagram = backend.getRRDScript(\"test/backend/test-data/TParser.g4\", \"expr\");\r\n        expect(diagram).toEqual(\"ComplexDiagram(Choice(0, Sequence(NonTerminal('expr'), \" +\r\n            \"Terminal('Star'), NonTerminal('expr')),\" +\r\n            \" Sequence(NonTerminal('expr'), Terminal('Plus'), NonTerminal('expr')), Sequence(Terminal('OpenPar'),\" +\r\n            \" NonTerminal('expr'), Terminal('ClosePar')), Sequence(Comment('<assoc=right>'), NonTerminal('expr')\" +\r\n            \", Terminal('QuestionMark'), NonTerminal('expr'), Terminal('Colon'), NonTerminal('expr')), \" +\r\n            \"Sequence(Comment('<assoc=right>'), NonTerminal('expr'), Terminal('Equal'), NonTerminal('expr')),\" +\r\n            \" Sequence(NonTerminal('id')), Sequence(NonTerminal('flowControl')), Sequence(Terminal('INT')), \" +\r\n            \"Sequence(Terminal('String')))).addTo()\",\r\n        );\r\n    });\r\n\r\n    it(\"Reference Graph\", () => {\r\n        const graph = backend.getReferenceGraph(\"test/backend/test-data/TParser.g4\");\r\n        expect(graph.size).toEqual(48);\r\n\r\n        let element = graph.get(\"TParser.expr\");\r\n        expect(element).toBeDefined();\r\n        if (element) {\r\n            expect(element.tokens.size).toEqual(9);\r\n            expect(element.tokens).toContain(\"TLexer.QuestionMark\");\r\n        }\r\n\r\n        element = graph.get(\"TParser.flowControl\");\r\n        expect(element).toBeDefined();\r\n        if (element) {\r\n            expect(element.rules.size).toEqual(1);\r\n            expect(element.tokens.size).toEqual(2);\r\n            expect(element.literals.size).toEqual(1);\r\n            expect(element.rules).toContain(\"TParser.expr\");\r\n            expect(element.tokens).toContain(\"TLexer.Continue\");\r\n            expect(element.literals.has(\"return\")).toBeTruthy();\r\n        }\r\n    });\r\n});\r\n"]}