{"version":3,"file":"bugs.spec.js","sourceRoot":"","sources":["../../../test/backend/bugs.spec.ts"],"names":[],"mappings":";;AAKA,qDAAuD;AACvD,mDAAqD;AAErD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAEvB,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC5C,MAAM,IAAI,GAAG,OAAO,CAAC,oBAAoB,CAAC,mCAAmC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QAC7F,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3B,IAAI,IAAI,EAAE;YACN,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;YAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,kBAAU,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACxD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACtD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACrD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACrD;SACJ;QACD,OAAO,CAAC,cAAc,CAAC,mCAAmC,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;QAC/C,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\nimport { SymbolKind } from \"../../src/backend/types\";\r\n\r\ndescribe(\"Test for Bugs\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"Lexer token in a set-element context\", () => {\r\n        const info = backend.symbolInfoAtPosition(\"test/backend/test-data/TParser.g4\", 30, 93, true);\r\n        expect(info).toBeDefined();\r\n        if (info) {\r\n            expect(info.name).toEqual(\"Semicolon\");\r\n            expect(info.source).toEqual(\"test/backend/test-data/TLexer.g4\");\r\n            expect(info.kind).toEqual(SymbolKind.LexerRule);\r\n            expect(info.definition).toBeDefined();\r\n            if (info.definition) {\r\n                expect(info.definition.text).toEqual(\"Semicolon: ';';\");\r\n                expect(info.definition.range.start.column).toEqual(0);\r\n                expect(info.definition.range.start.row).toEqual(59);\r\n                expect(info.definition.range.end.column).toEqual(14);\r\n                expect(info.definition.range.end.row).toEqual(59);\r\n            }\r\n        }\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser.g4\");\r\n        const selfDiags = backend.getSelfDiagnostics();\r\n        expect(selfDiags.contextCount).toEqual(0);\r\n    });\r\n});\r\n"]}