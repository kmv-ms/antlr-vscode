{"version":3,"file":"base.spec.js","sourceRoot":"","sources":["../../../test/backend/base.spec.ts"],"names":[],"mappings":";;AAKA,qDAAuD;AACvD,mEAAgE;AAEhE,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAEvB,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACtB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACjD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,IAAI,EAAiB,CAAC;IACtB,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACpB,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QAC9C,MAAM,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,6BAAa,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACtB,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAC5C,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,6BAAa,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAEhC,OAAO,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAC3C,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QAC9C,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC5B,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\nimport { SourceContext } from \"../../src/backend/SourceContext\";\r\n\r\ndescribe(\"Base Handling\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"Create Backend\", () => {\r\n        expect(1).toBe(1);\r\n        expect(backend).toHaveProperty(\"loadGrammar\");\r\n        expect(backend).toHaveProperty(\"releaseGrammar\");\r\n        expect(backend).toHaveProperty(\"reparse\");\r\n        expect(backend).toHaveProperty(\"infoForSymbol\");\r\n        expect(backend).toHaveProperty(\"listTopLevelSymbols\");\r\n        expect(backend).toHaveProperty(\"getDiagnostics\");\r\n    });\r\n\r\n    let c1: SourceContext;\r\n    it(\"Load Grammar\", () => {\r\n        c1 = backend.loadGrammar(\"test/backend/t.g4\");\r\n        expect(c1).toBeInstanceOf(SourceContext);\r\n    });\r\n\r\n    it(\"Unload grammar\", () => {\r\n        backend.releaseGrammar(\"test/backend/t.g4\");\r\n        let context = backend.loadGrammar(\"test/backend/t.g\"); // Non-existing grammar.\r\n        expect(context).toBeInstanceOf(SourceContext);\r\n        expect(context).not.toEqual(c1);\r\n\r\n        backend.releaseGrammar(\"test/backend/t.g\");\r\n        c1 = backend.loadGrammar(\"test/backend/t.g4\");\r\n        context = backend.loadGrammar(\"test/backend/t.g4\");\r\n        expect(context).toEqual(c1);\r\n        backend.releaseGrammar(\"test/backend/t.g4\");\r\n    });\r\n});\r\n"]}