{"version":3,"file":"code-generation.spec.js","sourceRoot":"","sources":["../../../test/backend/code-generation.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as fs from \"fs\";\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\n\r\ndescribe(\"Code Generation\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    afterEach(() => {\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/TLexer.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/t2.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser2.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/TLexer2.g4\");\r\n\r\n        fs.rmSync(\"generated-general\", { recursive: true, force: true });\r\n    });\r\n\r\n    it(\"A standard generation run (CSharp), split grammar\", async () => {\r\n        let result = await backend.generate(\"test/backend/test-data/TParser.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"CSharp\",\r\n        });\r\n        expect(result).toEqual([\"test/backend/test-data/TLexer.g4\", \"test/backend/test-data/TParser.g4\"]);\r\n\r\n        expect(fs.existsSync(\"generated-general/TLexer.cs\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParser.cs\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserBaseListener.cs\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserListener.cs\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserVisitor.cs\")).toBeFalsy(); // Not created by default.\r\n\r\n        expect(fs.existsSync(\"generated-general/TParser.interp\"));\r\n        expect(fs.existsSync(\"generated-general/TLexer.interp\"));\r\n\r\n        // Release the grammars, so no interpreter data exists anymore.\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/TLexer.g4\");\r\n\r\n        let temp = backend.getATNGraph(\"test/backend/test-data/TLexer.g4\", \"Dollar\");\r\n        expect(temp).toBeUndefined();\r\n        temp = backend.getATNGraph(\"test/backend/test-data/TParser.g4\", \"stat\");\r\n        expect(temp).toBeUndefined();\r\n\r\n        // Load interpreter data only (no real generation happens), using the data generated above.\r\n        result = await backend.generate(\"test/backend/test-data/TParser.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"CSharp\",\r\n            loadOnly: true,\r\n        });\r\n\r\n        // No dependencies are returned since data is only loaded, not generated.\r\n        expect(result).toHaveLength(0);\r\n\r\n        // Now load the lexer data too.\r\n        result = await backend.generate(\"test/backend/test-data/TLexer.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"CSharp\",\r\n            loadOnly: true,\r\n        });\r\n\r\n        const dollarGraph = backend.getATNGraph(\"test/backend/test-data/TLexer.g4\", \"Dollar\");\r\n        const statGraph = backend.getATNGraph(\"test/backend/test-data/TParser.g4\", \"stat\");\r\n\r\n        expect(dollarGraph).toBeDefined();\r\n        if (dollarGraph) {\r\n            expect(dollarGraph.nodes).toHaveLength(7);\r\n            expect(dollarGraph.nodes[0].name).toEqual(\"45\");\r\n            expect(dollarGraph.nodes[0].type).toEqual(2);\r\n            expect(dollarGraph.nodes[1].name).toEqual(\"140\");\r\n            expect(dollarGraph.nodes[1].type).toEqual(1);\r\n            expect(dollarGraph.nodes[4].name).toEqual(\"143\");\r\n            expect(dollarGraph.nodes[4].type).toEqual(1);\r\n            expect(dollarGraph.nodes[5].name).toEqual(\"144\");\r\n            expect(dollarGraph.nodes[5].type).toEqual(1);\r\n\r\n            expect(dollarGraph.links).toHaveLength(6);\r\n            expect(dollarGraph.links[1].source).toEqual(1);\r\n            expect(dollarGraph.links[1].target).toEqual(2);\r\n            expect(dollarGraph.links[1].type).toEqual(5);\r\n            expect(dollarGraph.links[1].labels).toHaveLength(2);\r\n            expect(dollarGraph.links[1].labels[0])\r\n                .toStrictEqual({ content: \"Atom Transition\", class: \"heading\" });\r\n            expect(dollarGraph.links[1].labels[1]).toStrictEqual({ content: \"'$'\" });\r\n\r\n            expect(dollarGraph.links[2].source).toEqual(2);\r\n            expect(dollarGraph.links[2].target).toEqual(3);\r\n            expect(dollarGraph.links[2].type).toEqual(1);\r\n            expect(dollarGraph.links[2].labels).toHaveLength(1);\r\n            expect(dollarGraph.links[2].labels[0]).toStrictEqual({ content: \"ε\" });\r\n\r\n            expect(dollarGraph.links[5].source).toEqual(5);\r\n            expect(dollarGraph.links[5].target).toEqual(6);\r\n            expect(dollarGraph.links[5].type).toEqual(1);\r\n            expect(dollarGraph.links[5].labels).toHaveLength(1);\r\n            expect(dollarGraph.links[5].labels[0]).toStrictEqual({ content: \"ε\" });\r\n        }\r\n\r\n        expect(statGraph).toBeDefined();\r\n        if (statGraph) {\r\n            expect(statGraph.nodes).toHaveLength(15);\r\n            expect(statGraph.nodes[0].id.toString()).toEqual(statGraph.nodes[0].name);\r\n            expect(statGraph.nodes[0].name).toEqual(\"12\");\r\n            expect(statGraph.nodes[0].type).toEqual(2);\r\n            expect(statGraph.nodes[6].id.toString()).toEqual(statGraph.nodes[6].name);\r\n            expect(statGraph.nodes[6].name).toEqual(\"80\");\r\n            expect(statGraph.nodes[6].type).toEqual(1);\r\n            expect(statGraph.nodes[10].name).toEqual(\"86\");\r\n            expect(statGraph.nodes[10].type).toEqual(1);\r\n            expect(statGraph.nodes[13].name).toEqual(\"83\");\r\n            expect(statGraph.nodes[13].type).toEqual(1);\r\n            expect(statGraph.nodes[2].name).toEqual(\"79\");\r\n            expect(statGraph.nodes[2].id).toEqual(79);\r\n            expect(statGraph.nodes[5].name).toEqual(\"expr\");\r\n            expect(statGraph.nodes[5].id).toEqual(-2);\r\n            expect(statGraph.nodes[9].name).toEqual(\"expr\");\r\n            expect(statGraph.nodes[9].id).toEqual(-3);\r\n\r\n            expect(statGraph.links).toHaveLength(15);\r\n            expect(statGraph.links[1].source).toEqual(1);\r\n            expect(statGraph.links[1].target).toEqual(2);\r\n            expect(statGraph.links[1].type).toEqual(1);\r\n            expect(statGraph.links[1].labels).toHaveLength(1);\r\n            expect(statGraph.links[1].labels[0]).toStrictEqual({ content: \"ε\" });\r\n\r\n            expect(statGraph.links[4].source).toEqual(3);\r\n            expect(statGraph.links[4].target).toEqual(6);\r\n            expect(statGraph.links[4].type).toEqual(3);\r\n            expect(statGraph.links[4].labels).toHaveLength(1);\r\n            expect(statGraph.links[4].labels[0]).toStrictEqual({ content: \"ε\" });\r\n\r\n            expect(statGraph.links[12].source).toEqual(11);\r\n            expect(statGraph.links[12].target).toEqual(13);\r\n            expect(statGraph.links[12].type).toEqual(5);\r\n            expect(statGraph.links[12].labels).toHaveLength(2);\r\n            expect(statGraph.links[12].labels[0])\r\n                .toStrictEqual({ content: \"Atom Transition\", class: \"heading\" });\r\n            expect(statGraph.links[12].labels[1]).toStrictEqual({ content: \"';'\" });\r\n        }\r\n    });\r\n\r\n    it(\"Interpreter load w/o existing data, split grammar\", async () => {\r\n        const result = await backend.generate(\"test/backend/test-data/TParser.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"CSharp\",\r\n            loadOnly: true,\r\n        });\r\n        expect(result).toHaveLength(0);\r\n        expect(!fs.existsSync(\"generated-general/\"));\r\n\r\n        const graph = backend.getATNGraph(\"test/backend/test-data/TParser.g4\", \"stat\");\r\n        expect(graph).toBeUndefined();\r\n    });\r\n\r\n    it(\"A generation run with settings, split grammar (typescript, cpp)\", async () => {\r\n        fs.mkdirSync(\"generated-general/typescript\", { recursive: true });\r\n        expect(fs.existsSync(\"generated-general/typescript\")).toBeTruthy();\r\n\r\n        // Path names are relative to the given base dir.\r\n        let result = await backend.generate(\"test/backend/test-data/TParser.g4\", {\r\n            baseDir: process.cwd(),\r\n            libDir: \"generated-general/typescript\",\r\n            outputDir: \"generated-general\",\r\n            language: \"typescript\",\r\n            package: \"parser\",\r\n            listeners: false,\r\n            visitors: true,\r\n        });\r\n        expect(result).toEqual([\"test/backend/test-data/TLexer.g4\", \"test/backend/test-data/TParser.g4\"]);\r\n\r\n        expect(fs.existsSync(\"generated-general/TLexer.ts\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParser.ts\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserListener.ts\")).toBeFalsy();\r\n        expect(fs.existsSync(\"generated-general/TParserVisitor.ts\")).toBeTruthy();\r\n\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser.g4\");\r\n        backend.releaseGrammar(\"test/backend/test-data/TLexer.g4\");\r\n\r\n        // The same grammar for the C++ target.\r\n        fs.mkdirSync(\"generated-general/cpp\", { recursive: true });\r\n        expect(fs.existsSync(\"generated-general/cpp\")).toBeTruthy();\r\n\r\n        result = await backend.generate(\"test/backend/test-data/TParser.g4\", {\r\n            baseDir: process.cwd(),\r\n            libDir: \"generated-general/cpp\",\r\n            outputDir: \"generated-general\",\r\n            language: \"Cpp\",\r\n            package: \"parser\",\r\n            listeners: true,\r\n            visitors: false,\r\n        });\r\n        expect(result).toEqual([\"test/backend/test-data/TLexer.g4\", \"test/backend/test-data/TParser.g4\"]);\r\n\r\n        expect(fs.existsSync(\"generated-general/TLexer.cpp\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParser.cpp\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserBaseListener.cpp\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserListener.cpp\")).toBeTruthy();\r\n        expect(fs.existsSync(\"generated-general/TParserBaseVisitor.cpp\")).toBeFalsy();\r\n        expect(fs.existsSync(\"generated-general/TParserVisitor.cpp\")).toBeFalsy();\r\n    });\r\n\r\n    it(\"Generation with semantic error, combined grammar (C++)\", async () => {\r\n        // File contains left recursive rule which are detected only by the ANTLR.\r\n        // Hence we need a generation run to report them.\r\n        const parserDiags = backend.getDiagnostics(\"test/backend/test-data/t2.g4\");\r\n        expect(parserDiags).toHaveLength(0); // No error here yet.\r\n\r\n        await backend.generate(\"test/backend/test-data/t2.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"Cpp\",\r\n            package: \"parser\",\r\n            listeners: false,\r\n            visitors: true,\r\n            alternativeJar: \"antlr/antlr-4.9.2-complete.jar\",\r\n        });\r\n        expect(parserDiags).toHaveLength(3);\r\n    });\r\n\r\n    it(\"Generation with Java exception, combined grammar (Java)\", async () => {\r\n        // Testing a grammar with an awful lot of (implicit) lexer tokens.\r\n        // Crashes ANTLR and we need to report that separately.\r\n        try {\r\n            await backend.generate(\"test/backend/test-data/OddExpr.g4\", {\r\n                outputDir: \"generated-general\",\r\n                language: \"Java\",\r\n                package: \"parser\",\r\n                listeners: false,\r\n                visitors: true,\r\n                alternativeJar: \"antlr/antlr-4.9.2-complete.jar\",\r\n            });\r\n        } catch (error) {\r\n            expect(error).toContain(\"java.lang.UnsupportedOperationException: Serialized ATN data \" +\r\n                \"element 101246 element 11 out of range 0..65535\");\r\n        }\r\n    });\r\n\r\n    it(\"Generation with errors, split grammar (C++)\", async () => {\r\n        // Asking for parser generation, getting lexer error back.\r\n        const result = await backend.generate(\"test/backend/test-data/TParser2.g4\", {\r\n            outputDir: \"generated-general\",\r\n            language: \"Cpp\",\r\n            package: \"parser\",\r\n            listeners: false,\r\n            visitors: false,\r\n            alternativeJar: \"antlr/antlr-4.9.2-complete.jar\",\r\n        });\r\n        expect(result).toEqual([\"test/backend/test-data/TLexer2.g4\", \"test/backend/test-data/TParser2.g4\"]);\r\n        const diagnostics = backend.getDiagnostics(\"test/backend/test-data/TLexer2.g4\");\r\n        expect(diagnostics).toHaveLength(1);\r\n        expect(diagnostics[0].message).toEqual(\"cannot find tokens file test/backend/test-data/nonexisting.tokens\");\r\n    });\r\n});\r\n"]}