{"version":3,"file":"debugger.spec.js","sourceRoot":"","sources":["../../../test/backend/debugger.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAKA,uCAAyB;AAEzB,qDAAuD;AAEvD,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACtB,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAEvB,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,OAAO,CAAC,QAAQ,CAAC,iCAAiC,EAAE;YACtD,SAAS,EAAE,oBAAoB;YAC/B,QAAQ,EAAE,MAAM;YAChB,cAAc,EAAE,gCAAgC;SACnD,CAAC,CAAC;QACH,IAAI;YACA,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,iCAAiC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACtF,MAAM,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,iCAAiC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;YACrF,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YACxB,IAAI,CAAC,EAAE;gBACH,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aAK3B;SACJ;gBAAS;YACN,OAAO,CAAC,cAAc,CAAC,iCAAiC,CAAC,CAAC;YAC1D,EAAE,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACrE;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as fs from \"fs\";\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\n\r\ndescribe(\"Debugger\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"Run interpreter\", async () => {\r\n        await backend.generate(\"test/backend/test-data/CPP14.g4\", {\r\n            outputDir: \"generated-debugger\",\r\n            language: \"Java\",\r\n            alternativeJar: \"antlr/antlr-4.9.2-complete.jar\",\r\n        });\r\n        try {\r\n            const code = fs.readFileSync(\"test/backend/test-data/code.cpp\", { encoding: \"utf8\" });\r\n            const d = backend.createDebugger(\"test/backend/test-data/CPP14.g4\", \"\", \"generated\");\r\n            expect(d).toBeDefined();\r\n            if (d) {\r\n                d.start(0, code, false);\r\n                //const tree = d!.currentParseTree;\r\n                //console.log(util.inspect(tree, false, null, true));\r\n\r\n                // TODO: test step-in/out/over/ as well as breakpoints.\r\n            }\r\n        } finally {\r\n            backend.releaseGrammar(\"test/backend/test-data/CPP14.g4\");\r\n            fs.rmSync(\"generated-debugger\", { recursive: true, force: true });\r\n        }\r\n    });\r\n});\r\n"]}