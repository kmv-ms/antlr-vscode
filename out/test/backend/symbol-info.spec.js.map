{"version":3,"file":"symbol-info.spec.js","sourceRoot":"","sources":["../../../test/backend/symbol-info.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Mike Lischke. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\n\r\nimport * as fs from \"fs\";\r\n\r\nimport { AntlrFacade } from \"../../src/backend/facade\";\r\nimport { SymbolKind } from \"../../src/backend/types\";\r\n\r\ndescribe(\"Symbol Info Retrieval (t.g4)\", () => {\r\n    const backend = new AntlrFacade(\".\", process.cwd()); // Search path is cwd for this test.\r\n    jest.setTimeout(30000);\r\n\r\n    it(\"Symbol Listing 1\", () => {\r\n        const info = backend.symbolInfoAtPosition(\"test/backend/test-data/t.g4\", 7, 2, true);\r\n        expect(info).toBeDefined();\r\n        if (info) {\r\n            expect(info.name).toEqual(\"B\");\r\n            expect(info.source).toEqual(\"test/backend/test-data/t.g4\");\r\n            expect(info.kind).toEqual(SymbolKind.LexerRule);\r\n\r\n            expect(info.definition).toBeDefined();\r\n            if (info.definition) {\r\n                expect(info.definition.text).toEqual(\"B: 'B';\");\r\n                expect(info.definition.range.start.column).toEqual(0);\r\n                expect(info.definition.range.start.row).toEqual(7);\r\n                expect(info.definition.range.end.column).toEqual(6);\r\n                expect(info.definition.range.end.row).toEqual(7);\r\n            }\r\n        }\r\n    });\r\n\r\n    it(\"listTopLevelSymbols\", () => {\r\n        const symbols = backend.listTopLevelSymbols(\"test/backend/test-data/t.g4\", true);\r\n        expect(symbols).toHaveLength(10);\r\n\r\n        const info = symbols[8];\r\n        expect(info.name).toEqual(\"x\");\r\n        expect(info.source).toEqual(\"test/backend/test-data/t.g4\");\r\n        expect(info.kind).toEqual(SymbolKind.ParserRule);\r\n\r\n        expect(info.definition).toBeDefined();\r\n        if (info.definition) {\r\n            expect(info.definition.text).toEqual(\"x: A | B | C;\");\r\n            expect(info.definition.range.start.column).toEqual(0);\r\n            expect(info.definition.range.start.row).toEqual(2);\r\n            expect(info.definition.range.end.column).toEqual(12);\r\n            expect(info.definition.range.end.row).toEqual(2);\r\n        }\r\n    });\r\n\r\n    it(\"Diagnostics 1\", () => {\r\n        const diagnostics = backend.getDiagnostics(\"test/backend/test-data/t.g4\");\r\n        expect(diagnostics).toHaveLength(2);\r\n\r\n        expect(diagnostics[0].message).toEqual(\"Unknown token reference 'ZZ'\");\r\n        expect(diagnostics[0].range.start.column).toEqual(3);\r\n        expect(diagnostics[0].range.start.row).toEqual(3);\r\n        expect(diagnostics[0].range.end.column).toEqual(5);\r\n        expect(diagnostics[0].range.end.row).toEqual(3);\r\n\r\n        expect(diagnostics[1].message).toEqual(\"Unknown channel 'BLAH'\");\r\n        expect(diagnostics[1].range.start.column).toEqual(18);\r\n        expect(diagnostics[1].range.start.row).toEqual(8);\r\n        expect(diagnostics[1].range.end.column).toEqual(22);\r\n        expect(diagnostics[1].range.end.row).toEqual(8);\r\n    });\r\n\r\n    it(\"reparse\", () => {\r\n        backend.loadGrammar(\"test/backend/test-data/t.g4\");\r\n        try {\r\n            backend.setText(\"test/backend/test-data/t.g4\", \"grammar A; a:: b \\n| c; c: b+;\");\r\n            backend.reparse(\"test/backend/test-data/t.g4\");\r\n            let diagnostics = backend.getDiagnostics(\"test/backend/test-data/t.g4\");\r\n\r\n            expect(diagnostics).toHaveLength(4);\r\n\r\n            expect(diagnostics[0].message).toEqual(\"mismatched input '::' expecting {BEGIN_ARGUMENT, \" +\r\n                \"'options', 'returns', 'locals', 'throws', COLON, AT}\");\r\n            expect(diagnostics[0].range.start.column).toEqual(12);\r\n            expect(diagnostics[0].range.start.row).toEqual(1);\r\n            expect(diagnostics[0].range.end.column).toEqual(14);\r\n            expect(diagnostics[0].range.end.row).toEqual(1);\r\n\r\n            expect(diagnostics[1].message).toEqual(\"mismatched input '|' expecting {BEGIN_ARGUMENT, \" +\r\n                \"'options', 'returns', 'locals', 'throws', COLON, AT}\");\r\n            expect(diagnostics[1].range.start.column).toEqual(0);\r\n            expect(diagnostics[1].range.start.row).toEqual(2);\r\n            expect(diagnostics[1].range.end.column).toEqual(1);\r\n            expect(diagnostics[1].range.end.row).toEqual(2);\r\n\r\n            backend.setText(\"test/backend/test-data/t.g4\", \"grammar A; a: b \\n| c; c: b+;\");\r\n            backend.reparse(\"test/backend/test-data/t.g4\");\r\n            diagnostics = backend.getDiagnostics(\"test/backend/test-data/t.g4\");\r\n\r\n            expect(diagnostics).toHaveLength(2);\r\n\r\n            expect(diagnostics[0].message).toEqual(\"Unknown parser rule 'b'\");\r\n            expect(diagnostics[0].range.start.column).toEqual(14);\r\n            expect(diagnostics[0].range.start.row).toEqual(1);\r\n            expect(diagnostics[0].range.end.column).toEqual(15);\r\n            expect(diagnostics[0].range.end.row).toEqual(1);\r\n\r\n            expect(diagnostics[1].message).toEqual(\"Unknown parser rule 'b'\");\r\n            expect(diagnostics[1].range.start.column).toEqual(8);\r\n            expect(diagnostics[1].range.start.row).toEqual(2);\r\n            expect(diagnostics[1].range.end.column).toEqual(9);\r\n            expect(diagnostics[1].range.end.row).toEqual(2);\r\n        } finally {\r\n            backend.releaseGrammar(\"test/backend/test-data/t.g4\");\r\n        }\r\n    });\r\n\r\n    it(\"Symbol Listing 2\", () => {\r\n        backend.loadGrammar(\"test/backend/test-data/TParser.g4\");\r\n        const symbols = backend.listTopLevelSymbols(\"test/backend/test-data/TParser.g4\", true);\r\n        expect(symbols).toHaveLength(56);\r\n\r\n        const info = symbols[38];\r\n        expect(info.name).toEqual(\"Mode2\");\r\n        expect(info.source).toEqual(\"test/backend/test-data/TLexer.g4\");\r\n        expect(info.kind).toEqual(SymbolKind.LexerMode);\r\n\r\n        expect(info.definition).toBeDefined();\r\n        if (info.definition) {\r\n            expect(info.definition.text).toEqual(\"mode Mode2;\");\r\n            expect(info.definition.range.start.column).toEqual(0);\r\n            expect(info.definition.range.start.row).toEqual(86);\r\n            expect(info.definition.range.end.column).toEqual(10);\r\n            expect(info.definition.range.end.row).toEqual(86);\r\n        }\r\n\r\n        let [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TParser.g4\", 37, 103);\r\n        expect(ruleName).toEqual(\"expr\");\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TParser.g4\", 100, 123);\r\n        expect(ruleName).toBeUndefined();\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TParser.g4\", 2, 119)!;\r\n        expect(ruleName).toEqual(\"any\");\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TParser.g4\", 103, 82)!;\r\n        expect(ruleName).toEqual(\"special\");\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TParser.g4\", 64, 68);\r\n        expect(ruleName).toBeUndefined();\r\n\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TLexer.g4\", 62, 77)!;\r\n        expect(ruleName).toEqual(\"Comment\");\r\n        [ruleName] = backend.ruleFromPosition(\"test/backend/test-data/TLexer.g4\", 0, 50)!;\r\n        expect(ruleName).toEqual(\"ID\");\r\n    });\r\n\r\n    it(\"Editing\", () => {\r\n        // Change the source. This will release the lexer reference and reload it.\r\n        // If that does not work we'll get a lot of unknown-symbol errors (for all lexer symbols).\r\n        const source = fs.readFileSync(\"test/backend/test-data/TParser.g4\", \"utf8\");\r\n        backend.setText(\"test/backend/test-data/TParser.g4\", source + \"\\nblah: any idarray;\");\r\n        backend.reparse(\"test/backend/test-data/TParser.g4\");\r\n\r\n        // This also updates the symbol reference counts.\r\n        const parserDiags = backend.getDiagnostics(\"test/backend/test-data/TParser.g4\");\r\n        expect(parserDiags).toHaveLength(0);\r\n    });\r\n\r\n    it(\"Diagnostics 2\", () => {\r\n        const lexerDiags = backend.getDiagnostics(\"test/backend/test-data/TLexer.g4\");\r\n        expect(lexerDiags).toHaveLength(0);\r\n\r\n        let refCount = backend.countReferences(\"test/backend/test-data/TParser.g4\", \"Semicolon\");\r\n        expect(refCount).toEqual(4);\r\n\r\n        refCount = backend.countReferences(\"test/backend/test-data/TLexer.g4\", \"Bar\");\r\n        expect(refCount).toEqual(2);\r\n        backend.releaseGrammar(\"test/backend/test-data/TParser.g4\");\r\n    });\r\n\r\n    it(\"Symbol ranges\", () => {\r\n        let symbol = backend.enclosingSymbolAtPosition(\"test/backend/test-data/TParser.g4\", 100, 4); // options {} block\r\n        expect(symbol).toBeDefined();\r\n        expect(symbol!.definition).toBeDefined();\r\n        expect(symbol!.definition!.range.start.row).toEqual(3);\r\n        expect(symbol!.definition!.range.start.column).toEqual(5);\r\n        expect(symbol!.definition!.range.end.row).toEqual(5);\r\n        expect(symbol!.definition!.range.end.column).toEqual(0);\r\n\r\n        symbol = backend.enclosingSymbolAtPosition(\"test/backend/test-data/TParser.g4\", 9, 34); // action block\r\n        expect(symbol).toBeDefined();\r\n        expect(symbol?.definition).toBeDefined();\r\n        if (symbol?.definition) {\r\n            expect(symbol.definition.range.start.row).toEqual(30);\r\n            expect(symbol.definition.range.start.column).toEqual(17);\r\n            expect(symbol.definition.range.end.row).toEqual(37);\r\n            expect(symbol.definition.range.end.column).toEqual(0);\r\n        }\r\n\r\n        symbol = backend.enclosingSymbolAtPosition(\"test/backend/test-data/TParser.g4\", 1000, 1000); // beyond EOF\r\n        expect(symbol).toBeUndefined();\r\n\r\n        // argument action block\r\n        symbol = backend.enclosingSymbolAtPosition(\"test/backend/test-data/TParser.g4\", 79, 82);\r\n        expect(symbol).toBeDefined();\r\n        expect(symbol?.definition).toBeDefined();\r\n        if (symbol?.definition) {\r\n            expect(symbol.definition.range.start.row).toEqual(82);\r\n            expect(symbol.definition.range.start.column).toEqual(63);\r\n            expect(symbol.definition.range.end.row).toEqual(82);\r\n            expect(symbol.definition.range.end.column).toEqual(89);\r\n        }\r\n\r\n        // same pos, rule context\r\n        symbol = backend.enclosingSymbolAtPosition(\"test/backend/test-data/TParser.g4\", 79, 82, true);\r\n        expect(symbol).toBeDefined();\r\n        expect(symbol?.definition).toBeDefined();\r\n        if (symbol?.definition) {\r\n            expect(symbol.definition.range.start.row).toEqual(82);\r\n            expect(symbol.definition.range.start.column).toEqual(0);\r\n            expect(symbol.definition.range.end.row).toEqual(90);\r\n            expect(symbol.definition.range.end.column).toEqual(0);\r\n        }\r\n    });\r\n});\r\n"]}